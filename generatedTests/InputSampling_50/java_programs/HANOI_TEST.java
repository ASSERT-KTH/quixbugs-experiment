package java_programs;


public class HANOI_TEST {
    @org.junit.Test(timeout = 60000)
    public void test_0() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_1() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_2() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_3() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_4() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_5() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)8,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_6() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_7() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_8() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_9() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_10() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_11() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_12() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_13() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)9,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_14() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_15() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)2,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_16() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_17() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)4,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_18() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_19() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)5,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_20() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)6,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,6],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,6],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_21() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)4,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_22() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_23() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)0,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_24() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)7,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_25() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)9,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_26() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_27() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)5,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_28() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)9,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_29() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)7,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_30() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)3,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_31() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)9,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_32() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_33() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_34() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_35() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)1,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_36() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)6,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_37() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_38() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)9,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_39() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)1,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_40() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_41() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_42() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)5,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_43() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_44() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)4,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_45() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_46() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_47() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_48() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)5,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_49() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }
}

