/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 06 04:57:20 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java_programs.SUBSEQUENCES;

public class SUBSEQUENCES_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = (-1929);
      int int1 = 4519;
      int int2 = 1;
      // Undeclared exception!
      SUBSEQUENCES.subsequences((-1929), 4519, 1);
  }

//  @Test(timeout = 4000)
//  public void test1()  throws Throwable  {
//      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
//      assertNotNull(sUBSEQUENCES0);
//      
//      int int0 = 0;
//      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 0, 0);
//      assertNotNull(arrayList0);
//      assertEquals(1, arrayList0.size());
//      assertFalse(arrayList0.isEmpty());
//      
//      int int1 = 0;
//      ArrayList<ArrayList> arrayList1 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(50, (-4618), 0);
//      assertNotNull(arrayList1);
//      assertTrue(arrayList1.equals((Object)arrayList0));
//      assertNotSame(arrayList1, arrayList0);
//      assertFalse(arrayList1.isEmpty());
//      assertEquals(1, arrayList1.size());
//      
//      ArrayList<ArrayList> arrayList2 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(146, 0, 0);
//      assertNotNull(arrayList2);
//      assertTrue(arrayList2.equals((Object)arrayList1));
//      assertTrue(arrayList2.equals((Object)arrayList0));
//      assertNotSame(arrayList2, arrayList0);
//      assertNotSame(arrayList2, arrayList1);
//      assertFalse(arrayList2.isEmpty());
//      assertEquals(1, arrayList2.size());
//      
//      ArrayList<ArrayList> arrayList3 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(1, 1, 0);
//      assertNotNull(arrayList3);
//      assertTrue(arrayList3.equals((Object)arrayList0));
//      assertTrue(arrayList3.equals((Object)arrayList1));
//      assertTrue(arrayList3.equals((Object)arrayList2));
//      assertNotSame(arrayList3, arrayList1);
//      assertNotSame(arrayList3, arrayList2);
//      assertNotSame(arrayList3, arrayList0);
//      assertEquals(1, arrayList3.size());
//      assertFalse(arrayList3.isEmpty());
//      
//      int int2 = (-1704);
//      int int3 = (-873);
//      SUBSEQUENCES.subsequences(int2, int3, int3);
//      int int4 = (-2806);
//      int int5 = 2881;
//      int int6 = (-2025);
//      SUBSEQUENCES.subsequences(int4, int5, int6);
//      int int7 = (-3208);
//      int int8 = 0;
//      SUBSEQUENCES.subsequences(int7, int7, int8);
//      int int9 = 1818;
//      SUBSEQUENCES.subsequences(int7, int8, int9);
//      int int10 = (-1);
//      SUBSEQUENCES.subsequences(int2, int10, int10);
//      int int11 = 0;
//      int int12 = 1778;
//      SUBSEQUENCES.subsequences(int11, int12, int0);
//      int int13 = 0;
//      int int14 = (-1);
//      SUBSEQUENCES.subsequences(int13, int14, int1);
//  }

//  @Test(timeout = 4000)
//  public void test2()  throws Throwable  {
//      int int0 = 0;
//      int int1 = 0;
//      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 0, 0);
//      assertNotNull(arrayList0);
//      assertEquals(1, arrayList0.size());
//      assertFalse(arrayList0.isEmpty());
//      
//      int int2 = 50;
//      int int3 = (-1096);
//      SUBSEQUENCES.subsequences(int2, int0, int3);
//      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
//      int int4 = 1;
//      SUBSEQUENCES.subsequences(int4, int2, int0);
//      int int5 = 0;
//      SUBSEQUENCES.subsequences(int0, int1, int5);
//  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SUBSEQUENCES.subsequences(36, 0, 0);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      SUBSEQUENCES.subsequences(36, 36, 0);
      SUBSEQUENCES.subsequences(36, 0, 1);
      SUBSEQUENCES.subsequences(0, 36, 36);
      SUBSEQUENCES.subsequences(0, 36, 36);
      SUBSEQUENCES.subsequences((-3524), 0, 0);
  }

//  @Test(timeout = 4000)
//  public void test4()  throws Throwable  {
//      int int0 = 0;
//      int int1 = 0;
//      SUBSEQUENCES.subsequences(0, 0, 0);
//      SUBSEQUENCES.subsequences(0, 0, 0);
//      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
//      SUBSEQUENCES.subsequences(0, 0, 1);
//      SUBSEQUENCES.subsequences(0, 1760, 0);
//      SUBSEQUENCES.subsequences(1, 0, 0);
//      int int2 = (-1);
//      SUBSEQUENCES.subsequences(int0, int0, int2);
//      int int3 = (-1240);
//      int int4 = 0;
//      SUBSEQUENCES.subsequences(int3, int1, int4);
//      int int5 = 0;
//      int int6 = 0;
//      int int7 = 1;
//      SUBSEQUENCES.subsequences(int5, int6, int7);
//      int int8 = 0;
//      int int9 = 0;
//      SUBSEQUENCES.subsequences(int8, int9, int9);
//      int int10 = 483;
//      int int11 = 494;
//      int int12 = 0;
//      SUBSEQUENCES.subsequences(int10, int11, int12);
//      SUBSEQUENCES.subsequences(int1, int1, int1);
//      SUBSEQUENCES.subsequences(int0, int0, int1);
//      int int13 = (-60);
//      SUBSEQUENCES.subsequences(int1, int1, int13);
//      int int14 = 2279;
//      int int15 = 1728;
//      SUBSEQUENCES.subsequences(int10, int14, int15);
//      SUBSEQUENCES.subsequences(int10, int1, int0);
//      int int16 = (-715);
//      SUBSEQUENCES.subsequences(int10, int16, int9);
//      int int17 = (-1009);
//      SUBSEQUENCES.subsequences(int17, int8, int0);
//  }

//  @Test(timeout = 4000)
//  public void test5()  throws Throwable  {
//      int int0 = 0;
//      int int1 = (-1);
//      SUBSEQUENCES.subsequences(int0, int0, int1);
//  }
//
//  @Test(timeout = 4000)
//  public void test6()  throws Throwable  {
//      int int0 = (-5168);
//      SUBSEQUENCES.subsequences(1, (-5168), 1);
//      int int1 = 0;
//      SUBSEQUENCES.subsequences(1296, (-5168), 0);
//      SUBSEQUENCES.subsequences(1296, 1, 1296);
//      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
//      SUBSEQUENCES.subsequences(0, 1410, 0);
//      int int2 = 50;
//      int int3 = 0;
//      SUBSEQUENCES.subsequences(int2, int3, int0);
//      int int4 = 1;
//      int int5 = 0;
//      SUBSEQUENCES.subsequences(int4, int5, int1);
//  }
}
