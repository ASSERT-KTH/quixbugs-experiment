/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 06 02:33:56 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java_programs.POSSIBLE_CHANGE;

public class POSSIBLE_CHANGE_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[0];
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, (-2380));
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int0);
      
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1744;
      intArray1[2] = 1;
      int int1 = POSSIBLE_CHANGE.possible_change(intArray1, 1);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4747;
      intArray0[1] = 1;
      intArray0[2] = (-656);
      intArray0[3] = 1315;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      int[] intArray1 = new int[0];
      int int0 = POSSIBLE_CHANGE.possible_change(intArray1, 332);
      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 3335;
      intArray0[2] = (-1517);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int0);
  }

//  @Test(timeout = 4000)
//  public void test3()  throws Throwable  {
//      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
//      int[] intArray0 = new int[1];
//      int int0 = (-722);
//      intArray0[0] = (-722);
//      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, (-722));
//      POSSIBLE_CHANGE.possible_change(intArray0, (-722));
//      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
//      int int3 = (-322);
//      int int4 = POSSIBLE_CHANGE.possible_change(intArray0, (-322));
//      int int5 = 1;
//      POSSIBLE_CHANGE.possible_change(intArray0, int5);
//      POSSIBLE_CHANGE.possible_change(intArray0, int1);
//      int int6 = POSSIBLE_CHANGE.possible_change(intArray0, int2);
//      int int7 = (-3305);
//      POSSIBLE_CHANGE.possible_change(intArray0, int7);
//      POSSIBLE_CHANGE.possible_change(intArray0, int6);
//      int int8 = (-1);
//      int int9 = POSSIBLE_CHANGE.possible_change(intArray0, int8);
//      int[] intArray1 = new int[9];
//      intArray1[0] = int4;
//      intArray1[1] = int6;
//      intArray1[2] = int9;
//      intArray1[3] = int1;
//      intArray1[4] = int7;
//      intArray1[5] = int4;
//      intArray1[6] = int4;
//      intArray1[7] = int8;
//      intArray1[8] = int5;
//      int int10 = 1751;
//      POSSIBLE_CHANGE.possible_change(intArray1, int10);
//      int int11 = 1404;
//      int int12 = POSSIBLE_CHANGE.possible_change(intArray1, int11);
//      POSSIBLE_CHANGE.possible_change(intArray1, int7);
//      POSSIBLE_CHANGE.possible_change(intArray1, int12);
//      POSSIBLE_CHANGE.possible_change(intArray1, int3);
//      POSSIBLE_CHANGE.possible_change(intArray1, int0);
//      POSSIBLE_CHANGE.possible_change(intArray0, intArray1[7]);
//      POSSIBLE_CHANGE.possible_change(intArray1, int7);
//  }

//  @Test(timeout = 4000)
//  public void test4()  throws Throwable  {
//      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
//      assertNotNull(pOSSIBLE_CHANGE0);
//      
//      int[] intArray0 = new int[3];
//      intArray0[0] = (-1030);
//      intArray0[1] = 0;
//      int int0 = (-1530);
//      intArray0[2] = (-1530);
//      int int1 = (-1959);
//      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, (-1959));
//      assertEquals(0, int2);
//      assertArrayEquals(new int[] {(-1030), 0, (-1530)}, intArray0);
//      assertFalse(int2 == int1);
//      assertFalse(int2 == int0);
//      assertEquals(3, intArray0.length);
//      
//      int int3 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
//      assertEquals(1, int3);
//      assertArrayEquals(new int[] {(-1030), 0, (-1530)}, intArray0);
//      assertFalse(int3 == int1);
//      assertFalse(int3 == int0);
//      assertFalse(int3 == int2);
//      assertEquals(3, intArray0.length);
//      
//      int[] intArray1 = new int[5];
//      assertFalse(intArray1.equals((Object)intArray0));
//      
//      intArray1[0] = 0;
//      intArray1[1] = (-1);
//      intArray1[2] = 0;
//      intArray1[3] = 0;
//      int int4 = 2001;
//      intArray1[4] = 2001;
//      int int5 = POSSIBLE_CHANGE.possible_change(intArray1, 0);
//      assertNotSame(intArray1, intArray0);
//      assertEquals(1, int5);
//      assertArrayEquals(new int[] {0, (-1), 0, 0, 2001}, intArray1);
//      assertTrue(int5 == int3);
//      assertFalse(int5 == int4);
//      assertFalse(int5 == int2);
//      assertFalse(int5 == int0);
//      assertFalse(int5 == int1);
//      assertFalse(intArray1.equals((Object)intArray0));
//      assertEquals(5, intArray1.length);
//      
//      int int6 = POSSIBLE_CHANGE.possible_change(intArray1, (-1));
//      assertNotSame(intArray1, intArray0);
//      assertEquals(0, int6);
//      assertArrayEquals(new int[] {0, (-1), 0, 0, 2001}, intArray1);
//      assertFalse(int6 == int1);
//      assertFalse(int6 == int0);
//      assertFalse(int6 == int5);
//      assertFalse(int6 == int3);
//      assertFalse(int6 == int4);
//      assertTrue(int6 == int2);
//      assertFalse(intArray1.equals((Object)intArray0));
//      assertEquals(5, intArray1.length);
//      
//      int int7 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
//      assertNotSame(intArray0, intArray1);
//      assertEquals(1, int7);
//      assertArrayEquals(new int[] {(-1030), 0, (-1530)}, intArray0);
//      assertFalse(intArray0.equals((Object)intArray1));
//      assertFalse(int7 == int4);
//      assertTrue(int7 == int5);
//      assertTrue(int7 == int3);
//      assertFalse(int7 == int0);
//      assertFalse(int7 == int2);
//      assertFalse(int7 == int1);
//      assertFalse(int7 == int6);
//      assertEquals(3, intArray0.length);
//      
//      int int8 = 1;
//      POSSIBLE_CHANGE.possible_change(intArray0, int8);
//      int int9 = 0;
//      POSSIBLE_CHANGE.possible_change(intArray0, int9);
//      int int10 = (-1401);
//      POSSIBLE_CHANGE.possible_change(intArray0, int10);
//      int[] intArray2 = new int[1];
//      intArray2[0] = int4;
//      int int11 = POSSIBLE_CHANGE.possible_change(intArray2, intArray0[1]);
//      POSSIBLE_CHANGE.possible_change(intArray0, int11);
//      POSSIBLE_CHANGE.possible_change(intArray1, int1);
//      int int12 = 87;
//      POSSIBLE_CHANGE.possible_change(intArray0, int12);
//      POSSIBLE_CHANGE.possible_change(intArray1, int0);
//  }

//  @Test(timeout = 4000)
//  public void test5()  throws Throwable  {
//      int[] intArray0 = new int[4];
//      intArray0[0] = 1;
//      intArray0[1] = (-1219);
//      intArray0[2] = 408;
//      intArray0[3] = 0;
//      POSSIBLE_CHANGE.possible_change(intArray0, intArray0[0]);
//      int int0 = 0;
//      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, int0);
//      POSSIBLE_CHANGE.possible_change(intArray0, intArray0[1]);
//      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, int1);
//      int int3 = (-396);
//      int int4 = POSSIBLE_CHANGE.possible_change(intArray0, int3);
//      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
//      int[] intArray1 = new int[6];
//      int int5 = (-1);
//      intArray1[0] = int5;
//      intArray1[1] = int2;
//      intArray1[2] = int1;
//      intArray1[3] = int4;
//      int int6 = (-307);
//      intArray1[4] = int6;
//      intArray1[5] = int0;
//      POSSIBLE_CHANGE.possible_change(intArray1, intArray1[3]);
//  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int[] intArray0 = null;
      int int0 = 1241;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change((int[]) null, 1241);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1485;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertEquals(1, intArray0.length);
      
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, 507);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(1, intArray0.length);
      
      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int2);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, intArray0.length);
      
      int int3 = POSSIBLE_CHANGE.possible_change(intArray0, (-2845));
      assertEquals(0, int3);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, intArray0.length);
      
      int int4 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int4);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(1, intArray0.length);
      
      int int5 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int5);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(1, intArray0.length);
      
      int int6 = POSSIBLE_CHANGE.possible_change(intArray0, (-1));
      assertEquals(0, int6);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertEquals(1, intArray0.length);
      
      int int7 = POSSIBLE_CHANGE.possible_change(intArray0, 1485);
      assertEquals(1, int7);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertEquals(1, intArray0.length);
      
      int int8 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int8);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertFalse(int8 == int5);
      assertTrue(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertEquals(1, intArray0.length);
      
      int int9 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int9);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int9 == int3);
      assertTrue(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertEquals(1, intArray0.length);
      
      int int10 = POSSIBLE_CHANGE.possible_change(intArray0, (-1));
      assertEquals(0, int10);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int10 == int3);
      assertFalse(int10 == int5);
      assertTrue(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertTrue(int10 == int1);
      assertTrue(int10 == int6);
      assertTrue(int10 == int2);
      assertTrue(int10 == int0);
      assertEquals(1, intArray0.length);
      
      int int11 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int11);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int11 == int5);
      assertTrue(int11 == int6);
      assertTrue(int11 == int2);
      assertTrue(int11 == int0);
      assertTrue(int11 == int10);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertTrue(int11 == int1);
      assertTrue(int11 == int3);
      assertFalse(int11 == int4);
      assertTrue(int11 == int8);
      assertEquals(1, intArray0.length);
      
      int int12 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int12);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int12 == int8);
      assertFalse(int12 == int4);
      assertFalse(int12 == int7);
      assertFalse(int12 == int9);
      assertTrue(int12 == int6);
      assertTrue(int12 == int0);
      assertFalse(int12 == int5);
      assertTrue(int12 == int11);
      assertTrue(int12 == int10);
      assertTrue(int12 == int3);
      assertTrue(int12 == int2);
      assertTrue(int12 == int1);
      assertEquals(1, intArray0.length);
      
      int int13 = POSSIBLE_CHANGE.possible_change(intArray0, 1485);
      assertEquals(1, int13);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int13 == int9);
      assertFalse(int13 == int12);
      assertTrue(int13 == int5);
      assertFalse(int13 == int8);
      assertFalse(int13 == int0);
      assertTrue(int13 == int7);
      assertFalse(int13 == int3);
      assertFalse(int13 == int10);
      assertFalse(int13 == int2);
      assertFalse(int13 == int11);
      assertFalse(int13 == int1);
      assertTrue(int13 == int4);
      assertFalse(int13 == int6);
      assertEquals(1, intArray0.length);
      
      int int14 = POSSIBLE_CHANGE.possible_change(intArray0, (-7836));
      assertEquals(0, int14);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int14 == int3);
      assertFalse(int14 == int5);
      assertFalse(int14 == int4);
      assertTrue(int14 == int1);
      assertTrue(int14 == int11);
      assertTrue(int14 == int6);
      assertTrue(int14 == int10);
      assertTrue(int14 == int2);
      assertTrue(int14 == int12);
      assertFalse(int14 == int13);
      assertTrue(int14 == int8);
      assertFalse(int14 == int7);
      assertFalse(int14 == int9);
      assertTrue(int14 == int0);
      assertEquals(1, intArray0.length);
      
      int int15 = POSSIBLE_CHANGE.possible_change(intArray0, 1485);
      assertEquals(1, int15);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int15 == int9);
      assertFalse(int15 == int14);
      assertFalse(int15 == int12);
      assertTrue(int15 == int4);
      assertTrue(int15 == int5);
      assertFalse(int15 == int8);
      assertFalse(int15 == int1);
      assertFalse(int15 == int10);
      assertFalse(int15 == int6);
      assertFalse(int15 == int2);
      assertFalse(int15 == int3);
      assertFalse(int15 == int11);
      assertTrue(int15 == int13);
      assertTrue(int15 == int7);
      assertFalse(int15 == int0);
      assertEquals(1, intArray0.length);
      
      int int16 = POSSIBLE_CHANGE.possible_change(intArray0, (-1));
      assertEquals(0, int16);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int16 == int4);
      assertTrue(int16 == int1);
      assertTrue(int16 == int8);
      assertTrue(int16 == int11);
      assertFalse(int16 == int13);
      assertFalse(int16 == int5);
      assertTrue(int16 == int0);
      assertFalse(int16 == int15);
      assertTrue(int16 == int12);
      assertFalse(int16 == int9);
      assertFalse(int16 == int7);
      assertTrue(int16 == int3);
      assertTrue(int16 == int14);
      assertTrue(int16 == int6);
      assertTrue(int16 == int10);
      assertTrue(int16 == int2);
      assertEquals(1, intArray0.length);
      
      int int17 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int17);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int17 == int0);
      assertTrue(int17 == int7);
      assertTrue(int17 == int13);
      assertFalse(int17 == int1);
      assertFalse(int17 == int11);
      assertFalse(int17 == int3);
      assertFalse(int17 == int10);
      assertFalse(int17 == int2);
      assertFalse(int17 == int6);
      assertTrue(int17 == int9);
      assertFalse(int17 == int16);
      assertFalse(int17 == int14);
      assertTrue(int17 == int15);
      assertFalse(int17 == int12);
      assertTrue(int17 == int5);
      assertTrue(int17 == int4);
      assertFalse(int17 == int8);
      assertEquals(1, intArray0.length);
      
      int int18 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int18);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertFalse(int18 == int7);
      assertFalse(int18 == int13);
      assertTrue(int18 == int14);
      assertTrue(int18 == int10);
      assertTrue(int18 == int3);
      assertTrue(int18 == int1);
      assertTrue(int18 == int6);
      assertTrue(int18 == int16);
      assertFalse(int18 == int15);
      assertFalse(int18 == int9);
      assertTrue(int18 == int2);
      assertFalse(int18 == int5);
      assertTrue(int18 == int11);
      assertFalse(int18 == int4);
      assertTrue(int18 == int8);
      assertTrue(int18 == int12);
      assertFalse(int18 == int17);
      assertTrue(int18 == int0);
      assertEquals(1, intArray0.length);
      
      int int19 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int19);
      assertArrayEquals(new int[] {1485}, intArray0);
      assertTrue(int19 == int13);
      assertFalse(int19 == int10);
      assertFalse(int19 == int3);
      assertFalse(int19 == int6);
      assertFalse(int19 == int2);
      assertTrue(int19 == int9);
      assertFalse(int19 == int16);
      assertTrue(int19 == int15);
      assertTrue(int19 == int4);
      assertFalse(int19 == int1);
      assertTrue(int19 == int17);
      assertTrue(int19 == int5);
      assertFalse(int19 == int11);
      assertFalse(int19 == int8);
      assertTrue(int19 == int7);
      assertFalse(int19 == int0);
      assertFalse(int19 == int14);
      assertFalse(int19 == int12);
      assertFalse(int19 == int18);
      assertEquals(1, intArray0.length);
  }
}
