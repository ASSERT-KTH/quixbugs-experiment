/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 29 13:38:07 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java_programs.SHORTEST_PATH_LENGTHS;

public class SHORTEST_PATH_LENGTHS_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SHORTEST_PATH_LENGTHS sHORTEST_PATH_LENGTHS0 = new SHORTEST_PATH_LENGTHS();
      int int0 = 0;
      int int1 = 1;
      HashMap<List<Integer>, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<List<Integer>, Integer>(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2392;
      Map<List<Integer>, Integer> map0 = null;
      Map<List<Integer>, Integer> map1 = SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1), (Map<List<Integer>, Integer>) null);
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(2392, map1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map<List<Integer>, Integer> map0 = SHORTEST_PATH_LENGTHS.shortest_path_lengths((-143), (Map<List<Integer>, Integer>) null);
      Map<List<Integer>, Integer> map1 = SHORTEST_PATH_LENGTHS.shortest_path_lengths((-143), map0);
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(593, map1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>();
      Map<List<Integer>, Integer> map0 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(0, hashMap0);
      SHORTEST_PATH_LENGTHS sHORTEST_PATH_LENGTHS0 = new SHORTEST_PATH_LENGTHS();
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(0, hashMap0);
      SHORTEST_PATH_LENGTHS.shortest_path_lengths((-520), map0);
      HashMap<List<Integer>, Integer> hashMap1 = new HashMap<List<Integer>, Integer>();
      SHORTEST_PATH_LENGTHS.shortest_path_lengths((-2728), hashMap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 99999;
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>();
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(99999, hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(325, hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SHORTEST_PATH_LENGTHS sHORTEST_PATH_LENGTHS0 = new SHORTEST_PATH_LENGTHS();
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>();
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(1, hashMap0);
      int int0 = 1;
      HashMap<List<Integer>, Integer> hashMap1 = new HashMap<List<Integer>, Integer>();
      Map<List<Integer>, Integer> map0 = SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1430), hashMap1);
      Map<List<Integer>, Integer> map1 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(1, map0);
      Map<List<Integer>, Integer> map2 = SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1), map1);
      Map<List<Integer>, Integer> map3 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(1, map0);
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(1, map0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      Integer.getInteger("B2rdB0%", integer0);
      hashMap1.put(linkedList0, integer0);
      SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1430), map2);
      hashMap1.put(linkedList0, (Integer) null);
      SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1), map1);
      Map<List<Integer>, Integer> map4 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(0, map3);
      SHORTEST_PATH_LENGTHS.shortest_path_lengths((-1430), map3);
      Map<List<Integer>, Integer> map5 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(2, map4);
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(156, map5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1886);
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      try { 
        Integer.decode("ks_xv<{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ks_xv<{\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SHORTEST_PATH_LENGTHS sHORTEST_PATH_LENGTHS0 = new SHORTEST_PATH_LENGTHS();
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>();
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(2847, hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SHORTEST_PATH_LENGTHS sHORTEST_PATH_LENGTHS0 = new SHORTEST_PATH_LENGTHS();
      int int0 = 99999;
      int int1 = 0;
      HashMap<List<Integer>, Integer> hashMap0 = new HashMap<List<Integer>, Integer>(0, 99999);
      Map<List<Integer>, Integer> map0 = SHORTEST_PATH_LENGTHS.shortest_path_lengths(0, hashMap0);
      // Undeclared exception!
      SHORTEST_PATH_LENGTHS.shortest_path_lengths(99999, map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SHORTEST_PATH_LENGTHS.shortest_path_lengths(465, (Map<List<Integer>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
