/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 08 22:52:03 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java_programs.POSSIBLE_CHANGE;

public class POSSIBLE_CHANGE_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = new int[0];
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      int int1 = POSSIBLE_CHANGE.possible_change(intArray1, 0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = new int[0];
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 62);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, (-228));
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      POSSIBLE_CHANGE.possible_change(intArray0, 62);
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, (-2557));
      POSSIBLE_CHANGE.possible_change(intArray0, (-1));
      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      assertEquals(0, int1);
      
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1667;
      intArray0[1] = (-56);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-565);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = null;
      POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      POSSIBLE_CHANGE.possible_change(intArray0, 1);
      int int1 = 5785;
      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, int1);
      int[] intArray1 = new int[1];
      intArray1[0] = int2;
      POSSIBLE_CHANGE.possible_change(intArray1, int0);
      int[] intArray2 = null;
      int int3 = 0;
      POSSIBLE_CHANGE.possible_change(intArray2, int3);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 353;
      intArray0[1] = (-661);
      intArray0[2] = 3336;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1411);
      intArray0[6] = 495;
      POSSIBLE_CHANGE.possible_change(intArray0, intArray0[6]);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-311);
      intArray0[4] = 0;
      intArray0[5] = 0;
      POSSIBLE_CHANGE.possible_change(intArray0, 0);
  }
}
