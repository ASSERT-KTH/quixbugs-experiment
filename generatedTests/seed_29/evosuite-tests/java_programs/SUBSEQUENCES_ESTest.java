/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 09 01:22:54 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java_programs.SUBSEQUENCES;

public class SUBSEQUENCES_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 0;
      int int1 = 2214;
      SUBSEQUENCES.subsequences(0, 0, 2214);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      SUBSEQUENCES.subsequences(3529, 1625, 1625);
      SUBSEQUENCES.subsequences(0, 0, 0);
      int int2 = (-1190);
      int int3 = (-1380);
      SUBSEQUENCES.subsequences(int0, int2, int3);
      int int4 = 0;
      int int5 = (-1);
      int int6 = 0;
      SUBSEQUENCES.subsequences(int4, int5, int6);
      int int7 = 0;
      SUBSEQUENCES.subsequences(int1, int7, int7);
      int int8 = (-2290);
      SUBSEQUENCES.subsequences(int8, int8, int4);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      assertNotNull(sUBSEQUENCES0);
      
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, (-852), (-808));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 1738;
      int int1 = (-2230);
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(1738, (-2230), (-2230));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      assertNotNull(sUBSEQUENCES0);
      
      int int2 = (-1);
      int int3 = 3368;
      SUBSEQUENCES.subsequences(int2, int3, int0);
      int int4 = 0;
      int int5 = (-4285);
      int int6 = (-1704);
      SUBSEQUENCES.subsequences(int4, int5, int6);
      int int7 = 50;
      int int8 = 1;
      int int9 = 0;
      SUBSEQUENCES.subsequences(int7, int8, int9);
      int int10 = 0;
      SUBSEQUENCES.subsequences(int1, int0, int10);
      int int11 = 0;
      SUBSEQUENCES.subsequences(int0, int0, int11);
      SUBSEQUENCES.subsequences(int0, int0, int1);
      int int12 = 1;
      SUBSEQUENCES.subsequences(int0, int0, int12);
      int int13 = 3660;
      int int14 = 603;
      SUBSEQUENCES.subsequences(int13, int13, int14);
      int int15 = 558;
      SUBSEQUENCES.subsequences(int15, int14, int12);
      int int16 = 994;
      int int17 = (-448);
      SUBSEQUENCES.subsequences(int16, int12, int17);
      SUBSEQUENCES.subsequences(int15, int10, int16);
      int int18 = 0;
      int int19 = (-2184);
      SUBSEQUENCES.subsequences(int18, int7, int19);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      assertNotNull(sUBSEQUENCES0);
      
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences((-1), 0, 0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = 0;
      ArrayList<ArrayList> arrayList1 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 3167, 0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      ArrayList<ArrayList> arrayList2 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(1, (-4467), (-4467));
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      int int1 = 3217;
      ArrayList<ArrayList> arrayList3 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(3217, 3217, 3217);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      
      ArrayList<ArrayList> arrayList4 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences((-1), 0, 1);
      assertNotSame(arrayList4, arrayList1);
      assertNotSame(arrayList4, arrayList2);
      assertNotSame(arrayList4, arrayList0);
      assertNotSame(arrayList4, arrayList3);
      assertNotNull(arrayList4);
      assertFalse(arrayList4.equals((Object)arrayList1));
      assertFalse(arrayList4.equals((Object)arrayList2));
      assertFalse(arrayList4.equals((Object)arrayList0));
      assertFalse(arrayList4.equals((Object)arrayList3));
      assertFalse(arrayList4.isEmpty());
      assertEquals(1, arrayList4.size());
      
      int int2 = 433;
      ArrayList<ArrayList> arrayList5 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(1, 1, 433);
      assertNotSame(arrayList5, arrayList2);
      assertNotSame(arrayList5, arrayList3);
      assertNotSame(arrayList5, arrayList1);
      assertNotSame(arrayList5, arrayList4);
      assertNotSame(arrayList5, arrayList0);
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertFalse(arrayList5.equals((Object)arrayList1));
      assertFalse(arrayList5.equals((Object)arrayList4));
      assertFalse(arrayList5.equals((Object)arrayList0));
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      
      int int3 = 0;
      int int4 = (-365);
      SUBSEQUENCES.subsequences(int3, int4, int4);
      int int5 = 0;
      SUBSEQUENCES.subsequences(int5, int1, int2);
      int int6 = 2687;
      int int7 = 1;
      SUBSEQUENCES.subsequences(int6, int1, int7);
      int int8 = (-1402);
      int int9 = 0;
      SUBSEQUENCES.subsequences(int0, int8, int9);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      assertNotNull(sUBSEQUENCES0);
      
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(4051, 4051, 4051);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = 1142;
      int int1 = (-1369);
      SUBSEQUENCES.subsequences(int0, int0, int1);
      int int2 = (-1);
      int int3 = 0;
      SUBSEQUENCES.subsequences(int2, int3, int3);
      int int4 = 0;
      int int5 = (-1);
      int int6 = 125;
      SUBSEQUENCES.subsequences(int4, int5, int6);
      int int7 = 0;
      SUBSEQUENCES.subsequences(int7, int2, int3);
      int int8 = 1621;
      int int9 = 531;
      SUBSEQUENCES.subsequences(int8, int8, int9);
      int int10 = (-4367);
      int int11 = 304;
      SUBSEQUENCES.subsequences(int10, int7, int11);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      assertNotNull(sUBSEQUENCES0);
      
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 0, 0);
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = 1346;
      int int1 = (-98);
      SUBSEQUENCES.subsequences(int0, int0, int1);
      int int2 = (-1186);
      int int3 = 1413;
      SUBSEQUENCES.subsequences(int2, int2, int3);
      int int4 = 0;
      int int5 = 1;
      SUBSEQUENCES.subsequences(int4, int5, int4);
      int int6 = 0;
      int int7 = 0;
      int int8 = (-213);
      SUBSEQUENCES.subsequences(int6, int7, int8);
      int int9 = 0;
      int int10 = 0;
      SUBSEQUENCES.subsequences(int9, int6, int10);
      int int11 = 0;
      SUBSEQUENCES.subsequences(int7, int11, int3);
      SUBSEQUENCES.subsequences(int5, int2, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1602);
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(1, (-1602), 1);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int2 = 5848;
      int int3 = 50;
      // Undeclared exception!
      SUBSEQUENCES.subsequences(1, 5848, 50);
  }
}
