/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 08 18:47:02 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java_programs.KNAPSACK;

public class KNAPSACK_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KNAPSACK kNAPSACK0 = new KNAPSACK();
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      KNAPSACK.knapsack(0, intArray0);
      KNAPSACK.knapsack(0, intArray0);
      KNAPSACK.knapsack(0, intArray0);
      int[][] intArray2 = new int[1][3];
      intArray2[0] = intArray1;
      KNAPSACK.knapsack(723, intArray2);
      KNAPSACK.knapsack(0, intArray2);
      KNAPSACK.knapsack(1, intArray2);
      KNAPSACK.knapsack(0, intArray0);
      KNAPSACK.knapsack(0, intArray2);
      KNAPSACK.knapsack(0, intArray2);
      int int0 = KNAPSACK.knapsack(1, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 357;
      intArray1[1] = 357;
      intArray1[2] = 357;
      intArray1[3] = 357;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 357;
      intArray4[1] = 357;
      intArray4[3] = 357;
      intArray4[4] = 0;
      intArray4[5] = 1363;
      intArray4[6] = 0;
      intArray4[7] = 357;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      intArray5[0] = 0;
      intArray5[1] = 1363;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 1363;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack(357, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 1829;
      intArray1[1] = 1829;
      intArray1[2] = 1829;
      intArray1[3] = 1829;
      intArray1[4] = 1829;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1829;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack(1829, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1942);
      intArray1[1] = (-325);
      intArray1[2] = 30;
      intArray1[3] = 826;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack(30, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1943
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (-1576);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = (-1576);
      intArray2[2] = 1;
      intArray2[3] = (-1576);
      intArray2[4] = (-1576);
      intArray2[5] = (-1576);
      intArray2[6] = (-1576);
      intArray0[1] = intArray2;
      int int0 = KNAPSACK.knapsack(1, intArray0);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KNAPSACK kNAPSACK0 = new KNAPSACK();
      assertNotNull(kNAPSACK0);
      
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray3[4] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 1;
      intArray4[6] = 1;
      intArray4[7] = 1;
      intArray0[3] = intArray4;
      int int0 = KNAPSACK.knapsack(1, intArray0);
      assertEquals(1, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack(1, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack((-2000), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KNAPSACK kNAPSACK0 = new KNAPSACK();
      assertNotNull(kNAPSACK0);
      
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2852;
      intArray1[1] = 2852;
      intArray1[2] = 2852;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2852;
      intArray2[1] = 2852;
      intArray2[2] = 2852;
      intArray2[3] = 2852;
      intArray2[4] = 2852;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 2852;
      intArray3[1] = 2852;
      intArray3[2] = 2852;
      intArray3[3] = 2852;
      intArray3[4] = 2852;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 2852;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2852;
      intArray5[1] = 2852;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 2852;
      intArray6[1] = 2852;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = 0;
      intArray7[1] = 2852;
      intArray7[2] = 2852;
      intArray7[3] = 2852;
      intArray7[4] = 2852;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray4));
      
      intArray8[0] = 0;
      intArray8[1] = 3556;
      intArray0[7] = intArray8;
      // Undeclared exception!
      KNAPSACK.knapsack(2852, intArray0);
  }
}
