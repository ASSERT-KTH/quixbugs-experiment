/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 08 22:13:57 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java_programs.PASCAL;

public class PASCAL_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PASCAL pASCAL0 = new PASCAL();
      PASCAL.pascal((-1));
      PASCAL.pascal((-1));
      // Undeclared exception!
      PASCAL.pascal(488);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = (-1097);
      ArrayList<ArrayList<Integer>> arrayList0 = PASCAL.pascal((-1097));
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      PASCAL pASCAL0 = new PASCAL();
      assertNotNull(pASCAL0);
      
      ArrayList<ArrayList<Integer>> arrayList1 = PASCAL.pascal((-1097));
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      ArrayList<ArrayList<Integer>> arrayList2 = PASCAL.pascal((-500));
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      
      // Undeclared exception!
      PASCAL.pascal(1368);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<ArrayList<Integer>> arrayList0 = PASCAL.pascal(0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      PASCAL pASCAL0 = new PASCAL();
      assertNotNull(pASCAL0);
      
      ArrayList<ArrayList<Integer>> arrayList1 = PASCAL.pascal(0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      
      ArrayList<ArrayList<Integer>> arrayList2 = PASCAL.pascal(0);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      
      ArrayList<ArrayList<Integer>> arrayList3 = PASCAL.pascal(0);
      assertNotSame(arrayList3, arrayList0);
      assertNotSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertEquals(1, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      
      ArrayList<ArrayList<Integer>> arrayList4 = PASCAL.pascal((-1431));
      assertNotSame(arrayList4, arrayList0);
      assertNotSame(arrayList4, arrayList3);
      assertNotSame(arrayList4, arrayList1);
      assertNotSame(arrayList4, arrayList2);
      assertNotNull(arrayList4);
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertTrue(arrayList4.equals((Object)arrayList0));
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertFalse(arrayList4.isEmpty());
      assertEquals(1, arrayList4.size());
      
      ArrayList<ArrayList<Integer>> arrayList5 = PASCAL.pascal(0);
      assertNotSame(arrayList5, arrayList0);
      assertNotSame(arrayList5, arrayList3);
      assertNotSame(arrayList5, arrayList1);
      assertNotSame(arrayList5, arrayList4);
      assertNotSame(arrayList5, arrayList2);
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertEquals(1, arrayList5.size());
      assertFalse(arrayList5.isEmpty());
  }
}
