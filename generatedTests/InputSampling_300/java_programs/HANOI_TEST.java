package java_programs;


public class HANOI_TEST {
    @org.junit.Test(timeout = 60000)
    public void test_0() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)0,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_1() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_2() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)7,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_3() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_4() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)2,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_5() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_6() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_7() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_8() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_9() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_10() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_11() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_12() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_13() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_14() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_15() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_16() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)5,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_17() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)9,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_18() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_19() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_20() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)7,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_21() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_22() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_23() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_24() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)3,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_25() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)1,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_26() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_27() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)4,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_28() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)5,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_29() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_30() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)3,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_31() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_32() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)7,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_33() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)5,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_34() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)5,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_35() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)1,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_36() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_37() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)4,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_38() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_39() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)5,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_40() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)1,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_41() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)4,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_42() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_43() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)7,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_44() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)4,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_45() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_46() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)5,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_47() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)3,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_48() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)1,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_49() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)5,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_50() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)6,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_51() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)2,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_52() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_53() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)4,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_54() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)2,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_55() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)0,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_56() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)6,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_57() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)6,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_58() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)4,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_59() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)3,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_60() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_61() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_62() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)5,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_63() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_64() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_65() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)6,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_66() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_67() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)5,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_68() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_69() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_70() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)9,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_71() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)2,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_72() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_73() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)9,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_74() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_75() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)6,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_76() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)1,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_77() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_78() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)0,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_79() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_80() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)3,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_81() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)0,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_82() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_83() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_84() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_85() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_86() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_87() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_88() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)0,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_89() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)7,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_90() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)9,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_91() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_92() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_93() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_94() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_95() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_96() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)9,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_97() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)3,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_98() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_99() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_100() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)3,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_101() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)7,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_102() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_103() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)6,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_104() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)2,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_105() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)4,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_106() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_107() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_108() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)0,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_109() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)0,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_110() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_111() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)8,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_112() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)4,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_113() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)8,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_114() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)3,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_115() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)7,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_116() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_117() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_118() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_119() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)1,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_120() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_121() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_122() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)8,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_123() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)1,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_124() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_125() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,6],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_126() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)5,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_127() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_128() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_129() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)6,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_130() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)2,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_131() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)3,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_132() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)0,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_133() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_134() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_135() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_136() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_137() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)4,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_138() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)9,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_139() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)9,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_140() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_141() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)6,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_142() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_143() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)6,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_144() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_145() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_146() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)8,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_147() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)3,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_148() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)0,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_149() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)9,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_150() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_151() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)0,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_152() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)7,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_153() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_154() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)7,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_155() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_156() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_157() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_158() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)6,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_159() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)5,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_160() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)4,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_161() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_162() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_163() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)4,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_164() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)6,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_165() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)3,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_166() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)1,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_167() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_168() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_169() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)5,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_170() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_171() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)7,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_172() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_173() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)6,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_174() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_175() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)9,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_176() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)1,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_177() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_178() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)7,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_179() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)0,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_180() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)9,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_181() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_182() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)3,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_183() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)1,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_184() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_185() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)9,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_186() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)5,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_187() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_188() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)5,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_189() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)7,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_190() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_191() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)5,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_192() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)3,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_193() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_194() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_195() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_196() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)8,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_197() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_198() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_199() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)0,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_200() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)3,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_201() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)3,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_202() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)9,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[9,6],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,6],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_203() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_204() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_205() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)3,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_206() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)3,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_207() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)6,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_208() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_209() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_210() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)0,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[0,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[0,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[0,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[0,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_211() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_212() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_213() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)0,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_214() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_215() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)2,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_216() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)5,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_217() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)5,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_218() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)0,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,2],[1,2],[0,1],[2,3],[2,1],[3,1],[0,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[0,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[0,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[0,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[0,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,0],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_219() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_220() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_221() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_222() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)4,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_223() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_224() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)9,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_225() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)7,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2],[7,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[7,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[7,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_226() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)6,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_227() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)3,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_228() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_229() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_230() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)5,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_231() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)8,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_232() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)9,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,2],[1,2],[9,1],[2,3],[2,1],[3,1],[9,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[9,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_233() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)6,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_234() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_235() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)6,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_236() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)2,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_237() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_238() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)0,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_239() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)8,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_240() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_241() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)5,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,1],[5,2],[1,2],[5,1],[2,3],[2,1],[3,1],[5,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[5,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[5,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_242() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)4,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_243() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_244() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)8,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_245() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_246() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)1,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_247() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)7,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_248() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)7,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_249() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)3,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,0],[1,3],[1,2],[3,2],[1,0],[2,1],[2,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_250() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)3,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_251() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_252() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)4,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_253() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)8,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,2],[8,1],[2,1],[8,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[8,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[8,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_254() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)8,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[8,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[8,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_255() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_256() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_257() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_258() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)5,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_259() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_260() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)0,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_261() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_262() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,1],[6,2],[1,2],[6,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[6,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[6,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,8],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,8],[1,3],[1,2],[3,2],[1,8],[2,1],[2,8],[1,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_263() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)9,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,1],[9,0],[1,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_264() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)4,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_265() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)2,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_266() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)1,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_267() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)6,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_268() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)0,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_269() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)1,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,4],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,4],[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_270() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)5,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,2],[5,1],[2,1],[5,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[5,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[5,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,5],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_271() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)4,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[4,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[4,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_272() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)2,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,9],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,9],[1,3],[1,2],[3,2],[1,9],[2,1],[2,9],[1,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_273() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)9,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_274() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)3,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_275() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)8,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,1],[8,2],[1,2],[8,1],[2,3],[2,1],[3,1],[8,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_276() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)7,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_277() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)0,(int)4,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_278() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)4,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_279() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)8,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[8,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_280() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)7,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_281() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)2,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_282() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_283() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)5,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[5,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_284() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)7,(int)8);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,8],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,8],[2,3],[2,1],[3,1],[2,8],[1,2],[1,8],[2,8]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_285() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)7,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,1],[7,2],[1,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_286() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)0,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,0],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,0],[2,3],[2,1],[3,1],[2,0],[1,2],[1,0],[2,0]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_287() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)0,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,2],[0,1],[2,1],[0,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[0,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[0,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_288() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)4,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,2],[4,1],[2,1],[4,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_289() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,7],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,7],[2,3],[2,1],[3,1],[2,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_290() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)6,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,7],[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_291() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)6,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_292() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)4,(int)1);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_293() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)1,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,7],[2,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_294() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)1,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_295() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)9);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,9],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,9],[2,3],[2,1],[3,1],[2,9],[1,2],[1,9],[2,9]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_296() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)2,(int)0,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[0,1],[0,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_297() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)2,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_298() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)9,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_299() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)4,(int)1,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,5],[2,3],[2,1],[3,1],[2,5],[1,2],[1,5],[2,5]]", resultFormatted);
    }
}

