/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 05 22:17:54 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java_programs.KNAPSACK;

public class KNAPSACK_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = (-698);
      int[][] intArray0 = new int[1][3];
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack((-698), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[2];
      intArray1[0] = 1210;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1210;
      intArray0[1] = intArray2;
      int int0 = KNAPSACK.knapsack(1210, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KNAPSACK kNAPSACK0 = new KNAPSACK();
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[6];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[1] = (-1);
      intArray0[2] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-1);
      intArray3[1] = (-1);
      intArray0[3] = intArray3;
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack((-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int int0 = KNAPSACK.knapsack(1, intArray0);
      assertEquals(1, int0);
      
      KNAPSACK.knapsack(0, intArray0);
      KNAPSACK.knapsack(0, intArray0);
      int[][] intArray2 = new int[6][5];
      intArray2[0] = intArray1;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray3[3] = (-846);
      intArray3[4] = 1;
      intArray2[1] = intArray3;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      intArray2[5] = intArray1;
      int int1 = KNAPSACK.knapsack(1, intArray2);
      assertEquals(2, int1);
  }

//  @Test(timeout = 4000)
//  public void test4()  throws Throwable  {
//      int[][] intArray0 = new int[9][4];
//      int[] intArray1 = new int[3];
//      intArray1[0] = 4724;
//      intArray1[1] = 4724;
//      intArray1[2] = 4724;
//      intArray0[0] = intArray1;
//      int[] intArray2 = new int[8];
//      intArray2[0] = 4724;
//      intArray2[1] = 4724;
//      intArray2[2] = 4724;
//      intArray2[3] = 4724;
//      intArray2[4] = 4724;
//      intArray2[5] = 4724;
//      intArray2[6] = 4724;
//      intArray2[7] = 4724;
//      intArray0[1] = intArray2;
//      int[] intArray3 = new int[9];
//      intArray3[0] = 4724;
//      intArray3[1] = 4724;
//      intArray3[2] = 1;
//      intArray3[3] = 4724;
//      intArray3[4] = 4724;
//      intArray3[5] = 4724;
//      intArray3[6] = 4724;
//      intArray3[7] = 4724;
//      intArray3[8] = 4724;
//      intArray0[2] = intArray3;
//      int[] intArray4 = new int[1];
//      intArray4[0] = 4724;
//      intArray0[3] = intArray4;
//      int[] intArray5 = new int[8];
//      intArray5[0] = 4724;
//      intArray5[1] = 4724;
//      intArray5[2] = 4724;
//      intArray5[3] = 1;
//      intArray5[4] = 1;
//      intArray5[5] = 1;
//      intArray5[6] = 1;
//      intArray5[7] = 4724;
//      intArray0[4] = intArray5;
//      int[] intArray6 = new int[1];
//      intArray6[0] = 4724;
//      intArray0[5] = intArray6;
//      int[] intArray7 = new int[8];
//      intArray7[0] = 1;
//      intArray7[1] = (-4154);
//      intArray7[2] = 1;
//      intArray7[3] = 1;
//      intArray7[4] = 1;
//      intArray7[5] = 1;
//      intArray7[6] = 4724;
//      intArray7[7] = 1;
//      intArray0[6] = intArray7;
//      int[] intArray8 = new int[0];
//      intArray0[7] = intArray8;
//      int[] intArray9 = new int[3];
//      intArray9[0] = (-4154);
//      intArray9[1] = 1;
//      intArray9[2] = (-4154);
//      intArray0[8] = intArray9;
//      // Undeclared exception!
//      KNAPSACK.knapsack(4724, intArray0);
//  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        KNAPSACK.knapsack(2242, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
