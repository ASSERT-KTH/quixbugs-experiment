package java_programs;


public class HANOI_TEST {
    @org.junit.Test(timeout = 60000)
    public void test_0() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)9,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,2],[9,1],[2,1],[9,2],[1,3],[1,2],[3,2],[9,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[9,6],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,6],[2,3],[2,1],[3,1],[2,6],[1,2],[1,6],[2,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_1() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)9,(int)7,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[7,2],[7,1],[2,1],[7,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[7,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[7,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_2() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)3,(int)1,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,4],[2,1],[2,4],[1,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_3() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)1,(int)6);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,6],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,6],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,6],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,6],[1,3],[1,2],[3,2],[1,6],[2,1],[2,6],[1,6]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_4() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)5,(int)6,(int)4);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,4],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,4],[2,3],[2,1],[3,1],[2,4],[1,2],[1,4],[2,4]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_5() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)6,(int)4,(int)7);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[4,1],[4,2],[1,2],[4,1],[2,3],[2,1],[3,1],[4,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[4,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[4,7],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,7],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,7],[1,3],[1,2],[3,2],[1,7],[2,1],[2,7],[1,7]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_6() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)6,(int)2);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[6,2],[6,1],[2,1],[6,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[6,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[6,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_7() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)7,(int)3,(int)3);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_8() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)8,(int)3,(int)5);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[1,3],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,2],[1,2],[1,3],[2,3],[1,2],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[2,3],[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[1,2],[3,1],[2,3],[2,1],[3,1],[3,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,3],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[3,1],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,3],[2,1],[2,3],[1,3],[1,2],[3,2],[3,1],[2,1],[3,2],[1,3],[1,2],[3,2],[1,5],[2,1],[2,3],[1,3],[2,1],[3,2],[3,1],[2,1],[2,5],[1,3],[1,2],[3,2],[1,5],[2,1],[2,5],[1,5]]", resultFormatted);
    }

    @org.junit.Test(timeout = 60000)
    public void test_9() throws java.lang.Exception {
        java.util.List result = java_programs.HANOI.hanoi((int)1,(int)9,(int)0);
        String resultFormatted = java_programs.QuixFixOracleHelper.format(result,true);
        org.junit.Assert.assertEquals("[[9,0]]", resultFormatted);
    }
}

