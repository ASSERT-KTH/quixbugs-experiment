/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 09 00:25:25 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java_programs.SIEVE;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class SIEVE_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Boolean> arrayList1 = new ArrayList<Boolean>();
      Boolean boolean0 = new Boolean(false);
      arrayList1.add(boolean0);
      Boolean boolean1 = Boolean.valueOf("");
      Boolean.getBoolean("");
      arrayList1.add(boolean1);
      boolean boolean2 = SIEVE.any(arrayList1);
      boolean boolean3 = SIEVE.all(arrayList1);
      assertTrue(boolean3 == boolean2);
      
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList2 = SIEVE.sieve(integer0);
      assertTrue(arrayList2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(268);
      ArrayList<Integer> arrayList0 = SIEVE.sieve(integer0);
      Integer.compare(2, 268);
      Integer.getInteger("k>(U1TfD~", (-1));
      arrayList0.parallelStream();
      ArrayList<Boolean> arrayList1 = SIEVE.list_comp(268, arrayList0);
      arrayList0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      arrayList0.sort(comparator0);
      Integer.compare(268, (-1));
      SIEVE.any(arrayList1);
      SIEVE.any(arrayList1);
      ArrayList<Boolean> arrayList2 = SIEVE.list_comp(0, arrayList0);
      SIEVE.all(arrayList2);
      SIEVE sIEVE0 = new SIEVE();
      Integer integer1 = new Integer(2024);
      // Undeclared exception!
      SIEVE.sieve(integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-1597));
      ArrayList<Integer> arrayList0 = SIEVE.sieve(integer0);
      arrayList0.add(integer0);
      ArrayList<Boolean> arrayList1 = SIEVE.list_comp((-2139), arrayList0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) arrayList1;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList1;
      Integer.remainderUnsigned((-2139), (-1597));
      Integer integer1 = new Integer((-2139));
      try { 
        Integer.parseUnsignedInt("java_programs.SIEVE", (-2139));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2139 less than Character.MIN_RADIX
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(0);
      ArrayList<Boolean> arrayList1 = SIEVE.list_comp(0, arrayList0);
      arrayList1.removeAll(arrayList0);
      boolean boolean0 = SIEVE.all(arrayList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      // Undeclared exception!
      try { 
        SIEVE.sieve((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>(199);
      Boolean boolean0 = Boolean.valueOf(false);
      arrayList0.add(boolean0);
      SIEVE.any(arrayList0);
      // Undeclared exception!
      try { 
        SIEVE.list_comp(199, (ArrayList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        SIEVE.all((ArrayList<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        SIEVE.any((ArrayList<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("");
      Boolean.logicalOr(false, false);
      arrayList0.add(boolean0);
      SIEVE.any(arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.spliterator();
      Integer integer0 = new Integer(0);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1462));
      arrayList1.add(integer1);
      // Undeclared exception!
      try { 
        SIEVE.list_comp(2377, arrayList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
      }
  }
}
