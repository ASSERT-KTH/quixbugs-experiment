
Wed Dec 19 08:49:35 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Arja/p1
Patch:
--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:11.048343665 -0500
+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_1/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:17.456456508 -0500
@@ -47,7 +47,6 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:37 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Arja/p2
Patch:
--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:11.048343665 -0500
+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_485/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:37:30.513093004 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.successor = null;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {
@@ -59,7 +59,8 @@
     }
 
     public ArrayList<Node> getSuccessors() {
-        return successors;
+        this.successor = null;
+        return successors;
     }
     public ArrayList<Node> getPredecessors() {
         return predecessors;

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:39 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Arja/p3
Patch:
--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:11.048343665 -0500
+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_302/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:37:02.804941690 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.value = value;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {
@@ -59,7 +59,8 @@
     }
 
     public ArrayList<Node> getSuccessors() {
-        return successors;
+        this.successor = null;
+        return successors;
     }
     public ArrayList<Node> getPredecessors() {
         return predecessors;

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:42 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Arja/p4
Patch:
--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:11.048343665 -0500
+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_32/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:22.512535827 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.value = value;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:44 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Arja/p5
Patch:
--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:11.048343665 -0500
+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_110/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 05:36:34.532698135 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.predecessors = new ArrayList<>();
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {
@@ -59,7 +59,8 @@
     }
 
     public ArrayList<Node> getSuccessors() {
-        return successors;
+        this.value = value;
+        return successors;
     }
     public ArrayList<Node> getPredecessors() {
         return predecessors;

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:45 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Cardumen/p1
Patch:

--- java_programs\/DEPTH_FIRST_SEARCH.java
+++ java_programs\/DEPTH_FIRST_SEARCH.java
@@ -13,7 +13,7 @@
 						return true;
 					}else {
 						for (java_programs.Node successornodes : node.getSuccessors()) {
-							if (search(successornodes)) {
+							if (node == node) {
 								return true;
 							}
 						}


failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:47 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Dynamoth/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/Node.java
+++ nopol-quixbugs/src/main/java/java_programs/Node.java
@@ -49,3 +49,5 @@
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        if (successors.contains((java.lang.Object) this)) {
+            this.successors = successors;
+        }
     }

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:49 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/JGenprog/p1
Patch:

--- java_programs\/Node.java
+++ java_programs\/Node.java
@@ -50,6 +50,7 @@
 
 	public void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {
 		this.successors = successors;
+		this.successors = new java.util.ArrayList<java_programs.Node>();
 	}
 
 	public void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {


failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:51 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/Jkali/p1
Patch:

--- java_programs\/Node.java
+++ java_programs\/Node.java
@@ -49,7 +49,6 @@
 	}
 
 	public void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {
-		this.successors = successors;
 	}
 
 	public void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {


failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:54 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/RSRepair/p1
Patch:
--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:09.099967637 -0500
+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_17/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:18.524015729 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        Set<Node> nodesvisited = new HashSet<>();
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:56 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/RSRepair/p2
Patch:
--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:09.099967637 -0500
+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_108/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:33.972094396 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.value = value;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:49:58 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/RSRepair/p3
Patch:
--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:09.099967637 -0500
+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_1/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:15.656001100 -0500
@@ -47,7 +47,6 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:50:00 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/RSRepair/p4
Patch:
--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:09.099967637 -0500
+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_5/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:16.368004733 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        this.successors = new ArrayList<>();
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:50:02 PST 2018 - Analyzing patched program: DEPTH_FIRST_SEARCH under path ./patchedPrograms/depth_first_search/RSRepair/p5
Patch:
--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:09.099967637 -0500
+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_96/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java    2018-12-02 12:31:32.196085363 -0500
@@ -47,7 +47,7 @@
     }
 
     public void setSuccessors(ArrayList<Node> successors) {
-        this.successors = successors;
+        Set<Node> nodesvisited = new HashSet<>();
     }
 
     public void setPredecessors(ArrayList<Node> predecessors) {
@@ -59,7 +59,8 @@
     }
 
     public ArrayList<Node> getSuccessors() {
-        return successors;
+        Set<Node> nodesvisited = new HashSet<>();
+        return successors;
     }
     public ArrayList<Node> getPredecessors() {
         return predecessors;

failed tests number: 1
failed tests info: [test2(java_programs.DEPTH_FIRST_SEARCH_ESTest): null-]
Wed Dec 19 08:50:04 PST 2018 - Analyzing patched program: FIND_IN_SORTED under path ./patchedPrograms/find_in_sorted/nopol-smt/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/FIND_IN_SORTED.java
+++ nopol-quixbugs/src/main/java/java_programs/FIND_IN_SORTED.java
@@ -16,3 +16,3 @@
         int mid = start + (end - start) / 2; // check this is floor division
-        if (x < arr[mid]) {
+        if ((mid <= 2) || (((x) != ((arr[mid]))) && (!(arr.length < (arr[mid]))))) {
             return binsearch(arr, x, start, mid);

failed tests number: 4
failed tests info: [test3(java_programs.FIND_IN_SORTED_ESTest): expected:<0> but was:<-1>-, test6(java_programs.FIND_IN_SORTED_ESTest): Expecting exception: NullPointerException-, test7(java_programs.FIND_IN_SORTED_ESTest): expected:<1> but was:<-1>-, test8(java_programs.FIND_IN_SORTED_ESTest): expected:<0> but was:<-1>-]
Wed Dec 19 08:50:05 PST 2018 - Analyzing patched program: GET_FACTORS under path ./patchedPrograms/get_factors/cardumen/p1
Patch:

--- java_programs\/GET_FACTORS.java
+++ java_programs\/GET_FACTORS.java
@@ -7,7 +7,7 @@
 			return new java.util.ArrayList<java.lang.Integer>();
 		}
 		int max = ((int) ((java.lang.Math.sqrt(n)) + 1.0));
-		for (int i = 2; i < max; i++) {
+		for (int i = 2; (n % n) == 0; i++) {
 			if ((n % i) == 0) {
 				java.util.ArrayList<java.lang.Integer> prepend = new java.util.ArrayList<java.lang.Integer>(0);
 				prepend.add(i);


failed tests number: 1
failed tests info: [test3(java_programs.GET_FACTORS_ESTest): / by zero-]
Wed Dec 19 08:50:06 PST 2018 - Analyzing patched program: HANOI under path ./patchedPrograms/hanoi/NPEFix/p1
Patch:
--- /HANOI.java
+++ /HANOI.java
@@ -24,3 +24,10 @@
             crap_set.remove(end);
-            int helper = crap_set.poll();
+            } else {
+                int helper;
+                if (crap_set.poll() == null) {
+                    helper = end;
+                } else {
+                    helper = crap_set.poll();
+                }
+            }
             steps.addAll(hanoi(height-1, start, helper));

passed all tests 
Wed Dec 19 08:50:07 PST 2018 - Analyzing patched program: IS_VALID_PARENTHESIZATION under path ./patchedPrograms/is_valid_parenthesization/nopol-smt/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/IS_VALID_PARENTHESIZATION.java
+++ nopol-quixbugs/src/main/java/java_programs/IS_VALID_PARENTHESIZATION.java
@@ -16,7 +16,7 @@
 	    Character paren = parens.charAt(i);
-	    if (paren.equals('(')) {
-                depth++;
+	    if ((1 < (parens.length()) - (1)) && ((paren) != (1 + '('))) {
+	        depth++;
 	    } else {
-		depth--;
-		if (depth < 0) { return false; }
+	        depth--;
+	        if (depth < 0) { return false; }
 	    }

failed tests number: 1
failed tests info: [test2(java_programs.IS_VALID_PARENTHESIZATION_ESTest): null-]
Wed Dec 19 08:50:08 PST 2018 - Analyzing patched program: KNAPSACK under path ./patchedPrograms/knapsack/mutation/p1
Patch:

--- java_programs\/KNAPSACK.java
+++ java_programs\/KNAPSACK.java
@@ -16,7 +16,7 @@
 				if ((i == 0) || (j == 0)) {
 					memo[i][j] = 0;
 				}else
-					if (weight < j) {
+					if (weight <= j) {
 						memo[i][j] = java.lang.Math.max(memo[(i - 1)][j], (value + (memo[(i - 1)][(j - weight)])));
 					}else {
 						memo[i][j] = memo[(i - 1)][j];


passed all tests 
Wed Dec 19 08:50:10 PST 2018 - Analyzing patched program: LEVENSHTEIN under path ./patchedPrograms/levenshtein/cardumen/p1
Patch:

--- java_programs\/LEVENSHTEIN.java
+++ java_programs\/LEVENSHTEIN.java
@@ -7,7 +7,7 @@
 			return source.isEmpty() ? target.length() : source.length();
 		}else
 			if ((source.charAt(0)) == (target.charAt(0))) {
-				return 1 + (java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1)));
+				return java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1));
 			}else {
 				return 1 + (java.lang.Math.min(java.lang.Math.min(java_programs.LEVENSHTEIN.levenshtein(source, target.substring(1)), java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1))), java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target)));
 			}


passed all tests 
Wed Dec 19 08:50:12 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/Arja/p1
Patch:
--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:18.902230939 -0500
+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_865/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:40:03.683088658 -0500
@@ -20,15 +20,25 @@
             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
             for (int j=1; j < longest+1; j++) {
                 if (arr[ends.get(j)] < val) {
-                    prefix_lengths.add(j);
+                    if (arr[ends.get(j)] < val) {
+                        prefix_lengths.add(j);
+                    }
                 }
             }
 
             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
 
-            if (length == longest || val < arr[ends.get(length+1)]) {
+            for (int j = 1; j < longest + 1; j++) {
+                if (arr[ends.get(j)] < val) {
+                    prefix_lengths.add(j);
+                }
+            }
+            if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
             i++;

passed all tests 
Wed Dec 19 08:50:13 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/Arja/p2
Patch:
--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:18.902230939 -0500
+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_364/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:38:34.566570253 -0500
@@ -28,7 +28,10 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
             i++;

passed all tests 
Wed Dec 19 08:50:14 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/Arja/p3
Patch:
--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:18.902230939 -0500
+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_146/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:55.890229808 -0500
@@ -20,7 +20,9 @@
             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
             for (int j=1; j < longest+1; j++) {
                 if (arr[ends.get(j)] < val) {
-                    prefix_lengths.add(j);
+                    if (arr[ends.get(j)] < val) {
+                        prefix_lengths.add(j);
+                    }
                 }
             }
 
@@ -28,7 +30,10 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
             i++;

passed all tests 
Wed Dec 19 08:50:15 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/Arja/p4
Patch:
--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:18.902230939 -0500
+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_331/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:38:28.782483553 -0500
@@ -28,10 +28,17 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
-            i++;
+            if (length == longest || val < arr[ends.get(length + 1)]) {
+                ends.put(length + 1, i);
+                longest = length + 1;
+            }
+            i++;
         }
         return longest;
     }

passed all tests 
Wed Dec 19 08:50:16 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/Arja/p5
Patch:
--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:37:18.902230939 -0500
+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_776/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 05:39:47.791041364 -0500
@@ -28,10 +28,13 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
             }
 
-            i++;
+            if (length == longest || val < arr[ends.get(length + 1)]) {
+                ends.put(length + 1, i);
+                longest = length + 1;
+            }
+            i++;
         }
         return longest;
     }

passed all tests 
Wed Dec 19 08:50:18 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/RSRepair/p1
Patch:
--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:08.869182822 -0500
+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_317/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:32:07.677466262 -0500
@@ -28,10 +28,13 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
             }
 
-            i++;
+            if (length == longest || val < arr[ends.get(length + 1)]) {
+                ends.put(length + 1, i);
+                longest = length + 1;
+            }
+            i++;
         }
         return longest;
     }

passed all tests 
Wed Dec 19 08:50:19 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/RSRepair/p2
Patch:
--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:08.869182822 -0500
+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_51/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:24.797261605 -0500
@@ -28,7 +28,10 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
             i++;

passed all tests 
Wed Dec 19 08:50:20 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/RSRepair/p3
Patch:
--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:08.869182822 -0500
+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_39/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:22.917252390 -0500
@@ -18,7 +18,12 @@
         for (int val : arr) {
 
             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
-            for (int j=1; j < longest+1; j++) {
+            for (int j = 1; j < longest + 1; j++) {
+                if (arr[ends.get(j)] < val) {
+                    prefix_lengths.add(j);
+                }
+            }
+            for (int j=1; j < longest+1; j++) {
                 if (arr[ends.get(j)] < val) {
                     prefix_lengths.add(j);
                 }
@@ -28,7 +33,10 @@
 
             if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
-                longest = length + 1;
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
             }
 
             i++;

passed all tests 
Wed Dec 19 08:50:22 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/RSRepair/p4
Patch:
--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:08.869182822 -0500
+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_546/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:32:44.005632147 -0500
@@ -26,8 +26,12 @@
 
             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
 
-            if (length == longest || val < arr[ends.get(length+1)]) {
-                ends.put(length+1, i);
+            ends.put(length + 1, i);
+            if (length == longest || val < arr[ends.get(length+1)]) {
+                if (length == longest || val < arr[ends.get(length + 1)]) {
+                    ends.put(length + 1, i);
+                    longest = length + 1;
+                }
                 longest = length + 1;
             }
 

passed all tests 
Wed Dec 19 08:50:23 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/RSRepair/p5
Patch:
--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:08.869182822 -0500
+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_172/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java    2018-12-02 12:31:44.429356589 -0500
@@ -26,7 +26,8 @@
 
             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
 
-            if (length == longest || val < arr[ends.get(length+1)]) {
+            ends.put(length + 1, i);
+            if (length == longest || val < arr[ends.get(length+1)]) {
                 ends.put(length+1, i);
                 longest = length + 1;
             }

passed all tests 
Wed Dec 19 08:50:24 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/statement/p1
Patch:

--- java_programs\/LIS.java
+++ java_programs\/LIS.java
@@ -14,6 +14,7 @@
 				}
 			}
 			int length = (!(prefix_lengths.isEmpty())) ? java.util.Collections.max(prefix_lengths) : 0;
+			ends.put((length + 1), i);
 			if ((length == longest) || (val < (arr[ends.get((length + 1))]))) {
 				ends.put((length + 1), i);
 				longest = length + 1;


passed all tests 
Wed Dec 19 08:50:25 PST 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/tibra/p1
Patch:

--- java_programs\/LIS.java
+++ java_programs\/LIS.java
@@ -14,6 +14,7 @@
 				}
 			}
 			int length = (!(prefix_lengths.isEmpty())) ? java.util.Collections.max(prefix_lengths) : 0;
+			ends.put((length + 1), i);
 			if ((length == longest) || (val < (arr[ends.get((length + 1))]))) {
 				ends.put((length + 1), i);
 				longest = length + 1;


passed all tests 
Wed Dec 19 08:50:27 PST 2018 - Analyzing patched program: MERGESORT under path ./patchedPrograms/mergesort/cardumen/p1
Patch:

--- java_programs\/MERGESORT.java
+++ java_programs\/MERGESORT.java
@@ -20,11 +20,17 @@
 	}
 
 	public static java.util.ArrayList<java.lang.Integer> mergesort(java.util.ArrayList<java.lang.Integer> arr) {
-		if ((arr.size()) == 0) {
+		if (((arr.size()) / 2) == 0) {
 			return arr;
 		}else {
 			int middle = (arr.size()) / 2;
 			java.util.ArrayList<java.lang.Integer> left = new java.util.ArrayList<java.lang.Integer>(100);
			left.addAll(arr.subList(0, middle));
			left = java_programs.MERGESORT.mergesort(left);
			java.util.ArrayList<java.lang.Integer> right = new java.util.ArrayList<java.lang.Integer>(100);
			right.addAll(arr.subList(middle, arr.size()));
			right = java_programs.MERGESORT.mergesort(right);
			return java_programs.MERGESORT.merge(left, right);
 		}
 	}
 }


passed all tests 
Wed Dec 19 08:50:28 PST 2018 - Analyzing patched program: NEXT_PERMUTATION under path ./patchedPrograms/next_permutation/mutation/p1
Patch:

--- java_programs\/NEXT_PERMUTATION.java
+++ java_programs\/NEXT_PERMUTATION.java
@@ -6,7 +6,7 @@
 		for (int i = (perm.size()) - 2; i != (-1); i--) {
 			if ((perm.get(i)) < (perm.get((i + 1)))) {
 				for (int j = (perm.size()) - 1; j != i; j--) {
-					if ((perm.get(j)) < (perm.get(i))) {
+					if ((perm.get(j)) >= (perm.get(i))) {
 						java.util.ArrayList<java.lang.Integer> next_perm = perm;
 						int temp_j = perm.get(j);
 						int temp_i = perm.get(i);


passed all tests 
Wed Dec 19 08:50:29 PST 2018 - Analyzing patched program: POWERSET under path ./patchedPrograms/powerset/tibra/p0
Patch:

--- java_programs\/POWERSET.java
+++ java_programs\/POWERSET.java
@@ -10,6 +10,7 @@
 			java.util.ArrayList<java.util.ArrayList> rest_subsets = java_programs.POWERSET.powerset(rest);
 			java.util.ArrayList<java.util.ArrayList> output = new java.util.ArrayList<java.util.ArrayList>(100);
 			java.util.ArrayList to_add = new java.util.ArrayList(100);
+			output.addAll(rest_subsets);
 			for (java.util.ArrayList subset : rest_subsets) {
 				java.util.ArrayList r = new java.util.ArrayList();
 				r.add(first);


passed all tests 
Wed Dec 19 08:50:30 PST 2018 - Analyzing patched program: POWERSET under path ./patchedPrograms/powerset/tibra/p1
Patch:

--- java_programs\/POWERSET.java
+++ java_programs\/POWERSET.java
@@ -18,7 +18,7 @@
 			}
 			output.addAll(to_add);
 			rest_subsets.addAll(output);
-			return output;
+			return rest_subsets;
 		}else {
 			java.util.ArrayList empty_set = new java.util.ArrayList<java.util.ArrayList>();
 			empty_set.add(new java.util.ArrayList());


passed all tests 
Wed Dec 19 08:50:32 PST 2018 - Analyzing patched program: POWERSET under path ./patchedPrograms/powerset/tibra/p2
Patch:

--- java_programs\/POWERSET.java
+++ java_programs\/POWERSET.java
@@ -16,6 +16,7 @@
 				r.addAll(subset);
 				to_add.add(r);
 			}
+			output.addAll(rest_subsets);
 			output.addAll(to_add);
 			rest_subsets.addAll(output);
 			return output;
passed all tests 
Wed Dec 19 08:50:33 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/Arja/p1
Patch:
--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:36:30.254338040 -0500
+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_1280/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:43:02.203568027 -0500
@@ -13,7 +13,9 @@
 public class QUICKSORT {
     public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
         if (arr.isEmpty()) {
-            return new ArrayList<Integer>();
+            if (arr.isEmpty()) {
+                return new ArrayList<Integer>();
+            }
         }
 
         Integer pivot = arr.get(0);
@@ -23,9 +25,8 @@
         for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
         ArrayList<Integer> middle = new ArrayList<Integer>();
         middle.add(pivot);

passed all tests 
Wed Dec 19 08:50:34 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/Arja/p2
Patch:
--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:36:30.254338040 -0500
+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_1259/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:42:44.931441007 -0500
@@ -23,13 +23,15 @@
         for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
         ArrayList<Integer> middle = new ArrayList<Integer>();
         middle.add(pivot);
-        lesser = quicksort(lesser);
+        if (arr.isEmpty()) {
+            return new ArrayList<Integer>();
+        }
+        lesser = quicksort(lesser);
         greater = quicksort(greater);
         middle.addAll(greater);
         lesser.addAll(middle);

passed all tests 
Wed Dec 19 08:50:35 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/Arja/p3
Patch:
--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:36:30.254338040 -0500
+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_531/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:38:53.543931152 -0500
@@ -17,15 +17,18 @@
         }
 
         Integer pivot = arr.get(0);
-        ArrayList<Integer> lesser = new ArrayList<Integer>();
-        ArrayList<Integer> greater = new ArrayList<Integer>();
+        if (arr.isEmpty()) {
+            return new ArrayList<Integer>();
+        }
+        ArrayList<Integer> lesser = new ArrayList<Integer>();
+        lesser = quicksort(lesser);
+        ArrayList<Integer> greater = new ArrayList<Integer>();
 
         for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
         ArrayList<Integer> middle = new ArrayList<Integer>();
         middle.add(pivot);

passed all tests 
Wed Dec 19 08:50:36 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/Arja/p4
Patch:
--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:36:30.254338040 -0500
+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_993/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:40:47.506590981 -0500
@@ -20,16 +20,22 @@
         ArrayList<Integer> lesser = new ArrayList<Integer>();
         ArrayList<Integer> greater = new ArrayList<Integer>();
 
-        for (Integer x : arr.subList(1, arr.size())) {
+        if (arr.isEmpty()) {
+            return new ArrayList<Integer>();
+        }
+        for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
-        ArrayList<Integer> middle = new ArrayList<Integer>();
-        middle.add(pivot);
         lesser = quicksort(lesser);
+        ArrayList<Integer> middle = new ArrayList<Integer>();
+        middle.add(pivot);
+        if (arr.isEmpty()) {
+            return new ArrayList<Integer>();
+        }
+        lesser = quicksort(lesser);
         greater = quicksort(greater);
         middle.addAll(greater);
         lesser.addAll(middle);

passed all tests 
Wed Dec 19 08:50:38 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/Arja/p5
Patch:
--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:36:30.254338040 -0500
+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_898/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 05:40:08.922039461 -0500
@@ -23,9 +23,8 @@
         for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
         ArrayList<Integer> middle = new ArrayList<Integer>();
         middle.add(pivot);

passed all tests 
Wed Dec 19 08:50:39 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/jkali/p1
Patch:

--- java_programs\/QUICKSORT.java
+++ java_programs\/QUICKSORT.java
@@ -13,7 +13,7 @@
 			if (x < pivot) {
 				lesser.add(x);
 			}else
-				if (x > pivot) {
+				if (true) {
 					greater.add(x);
 				}
 


passed all tests 
Wed Dec 19 08:50:40 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/mutation/p1
Patch:

--- java_programs\/QUICKSORT.java
+++ java_programs\/QUICKSORT.java
@@ -10,7 +10,7 @@
 		java.util.ArrayList<java.lang.Integer> lesser = new java.util.ArrayList<java.lang.Integer>();
 		java.util.ArrayList<java.lang.Integer> greater = new java.util.ArrayList<java.lang.Integer>();
 		for (java.lang.Integer x : arr.subList(1, arr.size())) {
-			if (x < pivot) {
+			if (x <= pivot) {
 				lesser.add(x);
 			}else
 				if (x > pivot) {


passed all tests 
Wed Dec 19 08:50:41 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/nopol-dynamoth/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
+++ nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
@@ -25,3 +25,3 @@
                 lesser.add(x);
-            } else if (x > pivot) {
+            } else if (arr.contains((java.lang.Object) pivot)) {
                 greater.add(x);

passed all tests 
Wed Dec 19 08:50:42 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/nopol-smt/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
+++ nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
@@ -25,3 +25,3 @@
                 lesser.add(x);
-            } else if (x > pivot) {
+            } else if (lesser!=null) {
                 greater.add(x);

passed all tests 
Wed Dec 19 08:50:44 PST 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/RSRepair/p1
Patch:
--- /tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 12:31:12.235565775 -0500
+++ /tmp/RSRepair_QuixBugs_QUICKSORT_/patches_4rrc/Patch_546/patched/tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java    2018-12-02 12:34:11.456017610 -0500
@@ -23,9 +23,8 @@
         for (Integer x : arr.subList(1, arr.size())) {
             if (x < pivot) {
                 lesser.add(x);
-            } else if (x > pivot) {
-                greater.add(x);
-            }
+            } else
+                greater.add(x);
         }
         ArrayList<Integer> middle = new ArrayList<Integer>();
         middle.add(pivot);

passed all tests 
Wed Dec 19 08:50:45 PST 2018 - Analyzing patched program: RPN_EVAL under path ./patchedPrograms/rpn_eval/cardumen/p1
Patch:

--- java_programs\/RPN_EVAL.java
+++ java_programs\/RPN_EVAL.java
@@ -18,7 +18,7 @@
 				java.lang.Double b = ((java.lang.Double) (stack.pop()));
 				java.lang.Double c = 0.0;
 				java.util.function.BinaryOperator<java.lang.Double> bin_op = op.get(token);
-				c = bin_op.apply(a, b);
+				c = bin_op.apply(b, a);
 				stack.push(c);
 			}
 		}


passed all tests 


Fri Dec 21 16:51:12 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p1
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1094/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:18.537088250 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:13 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p2
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_983/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:00.808979783 -0500
@@ -17,24 +17,15 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
                 for (int j = 0; j < numNodes; j++) {
                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
+                    length_by_path.put(Arrays.asList(i, j), update_length);
+                    length_by_path.put(Arrays.asList(i,j), update_length);
                 }
             }
         }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:14 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p3
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_898/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:39:47.324896921 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:16 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p4
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1184/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:33.393178755 -0500
@@ -17,20 +17,22 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
+                for (int j = 0; j < numNodes; j++) {
+                    List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));
+                    if (i == j) {
+                        length_by_path.put(edge, 0);
+                    } else if (length_by_edge.containsKey(edge)) {
+                        length_by_path.put(edge, length_by_edge.get(edge));
+                    } else {
+                        length_by_path.put(edge, INF);
+                    }
+                }
+            }
+            for (int i = 0; i < numNodes; i++) {
                 for (int j = 0; j < numNodes; j++) {
                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:17 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p5
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_603/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:39:01.968615670 -0500
@@ -21,22 +21,23 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    return length_by_path;
             }
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
+                for (int j = 0; j < numNodes; j++) {
+                    List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));
+                    if (i == j) {
+                        length_by_path.put(edge, 0);
+                    } else if (length_by_edge.containsKey(edge)) {
+                        length_by_path.put(edge, length_by_edge.get(edge));
+                    } else {
+                        length_by_path.put(edge, INF);
+                    }
+                }
+            }
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:18 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/jgenprog/p1
Patch:

--- java_programs\/SHORTEST_PATH_LENGTHS.java
+++ java_programs\/SHORTEST_PATH_LENGTHS.java
@@ -16,6 +16,7 @@
 						length_by_path.put(edge, length_by_edge.get(edge));
 					}else {
 						length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);
+						return length_by_path;
 					}
 
 			}


passed all tests 
Fri Dec 21 16:51:19 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p1
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_64/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:27.716800105 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:21 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p2
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_187/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:46.092758943 -0500
@@ -21,22 +21,12 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    ;
             }
         }
         for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
+            return length_by_path;
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:22 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p3
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_128/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:37.476778299 -0500
@@ -21,22 +21,11 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    ;
             }
         }
         for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 16:51:23 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p4
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_170/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:43.788764128 -0500
@@ -23,7 +23,7 @@
                     length_by_path.put(edge, 0);
                 }
                 else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
+                    return length_by_path;
                 } else {
                     length_by_path.put(edge, INF);
                 }
@@ -31,11 +31,6 @@
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
             }
         }
         return length_by_path;

passed all tests 
Fri Dec 21 16:51:25 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p5
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_764/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:33:14.252555940 -0500
@@ -19,23 +19,10 @@
         for (int i = 0; i < numNodes; i++) {
             for (int j =0; j < numNodes; j++) {
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
             }
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
             }
         }
         return length_by_path;

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:46 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p1
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1094/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:18.537088250 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:48 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p2
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_983/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:00.808979783 -0500
@@ -17,24 +17,15 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
                 for (int j = 0; j < numNodes; j++) {
                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
+                    length_by_path.put(Arrays.asList(i, j), update_length);
+                    length_by_path.put(Arrays.asList(i,j), update_length);
                 }
             }
         }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:49 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p3
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_898/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:39:47.324896921 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:50 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p4
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1184/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:40:33.393178755 -0500
@@ -17,20 +17,22 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
+                for (int j = 0; j < numNodes; j++) {
+                    List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));
+                    if (i == j) {
+                        length_by_path.put(edge, 0);
+                    } else if (length_by_edge.containsKey(edge)) {
+                        length_by_path.put(edge, length_by_edge.get(edge));
+                    } else {
+                        length_by_path.put(edge, INF);
+                    }
+                }
+            }
+            for (int i = 0; i < numNodes; i++) {
                 for (int j = 0; j < numNodes; j++) {
                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:51 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/Arja/p5
Patch:
--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_603/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 05:39:01.968615670 -0500
@@ -21,22 +21,23 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    return length_by_path;
             }
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
+                for (int j = 0; j < numNodes; j++) {
+                    List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));
+                    if (i == j) {
+                        length_by_path.put(edge, 0);
+                    } else if (length_by_edge.containsKey(edge)) {
+                        length_by_path.put(edge, length_by_edge.get(edge));
+                    } else {
+                        length_by_path.put(edge, INF);
+                    }
+                }
+            }
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:53 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/jgenprog/p1
Patch:

--- java_programs\/SHORTEST_PATH_LENGTHS.java
+++ java_programs\/SHORTEST_PATH_LENGTHS.java
@@ -16,6 +16,7 @@
 						length_by_path.put(edge, length_by_edge.get(edge));
 					}else {
 						length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);
+						return length_by_path;
 					}
 
 			}


passed all tests 
Fri Dec 21 23:58:54 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p1
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_64/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:27.716800105 -0500
@@ -17,17 +17,7 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
+            return length_by_path;
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:55 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p2
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_187/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:46.092758943 -0500
@@ -21,22 +21,12 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    ;
             }
         }
         for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
+            return length_by_path;
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:57 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p3
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_128/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:37.476778299 -0500
@@ -21,22 +21,11 @@
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+                    ;
             }
         }
         for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
         }
         return length_by_path;
     }

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]
Fri Dec 21 23:58:58 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p4
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_170/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:43.788764128 -0500
@@ -23,7 +23,7 @@
                     length_by_path.put(edge, 0);
                 }
                 else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
+                    return length_by_path;
                 } else {
                     length_by_path.put(edge, INF);
                 }
@@ -31,11 +31,6 @@
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
             }
         }
         return length_by_path;

passed all tests 
Fri Dec 21 23:58:59 PST 2018 - Analyzing patched program: SHORTEST_PATH_LENGTHS under path ./patchedPrograms/shortest_path_lengths/RSRepair/p5
Patch:
--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:31:10.452838352 -0500
+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_764/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java    2018-12-02 12:33:14.252555940 -0500
@@ -19,23 +19,10 @@
         for (int i = 0; i < numNodes; i++) {
             for (int j =0; j < numNodes; j++) {
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
-                if (i == j) {
-                    length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
             }
         }
         for (int k = 0; k < numNodes; k++) {
             for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
             }
         }
         return length_by_path;

failed tests number: 1
failed tests info: [test10(java_programs.SHORTEST_PATH_LENGTHS_ESTest): Expecting exception: NullPointerException-]