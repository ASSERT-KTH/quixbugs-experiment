/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 05 21:18:11 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java_programs.HANOI;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class HANOI_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HANOI.Pair<Integer, String> hANOI_Pair0 = (HANOI.Pair<Integer, String>) mock(HANOI.Pair.class, new ViolatedAssumptionAnswer());
      HANOI.Pair<HANOI.Pair<Integer, String>, Object> hANOI_Pair1 = new HANOI.Pair<HANOI.Pair<Integer, String>, Object>(hANOI_Pair0, hANOI_Pair0);
      Integer integer0 = new Integer((-756));
      HANOI.Pair<Integer, String> hANOI_Pair2 = new HANOI.Pair<Integer, String>(integer0, "(");
      hANOI_Pair2.toString();
      hANOI_Pair1.setFirst(hANOI_Pair2);
      HANOI.Pair<Integer, String> hANOI_Pair3 = hANOI_Pair1.getFirst();
      HANOI hANOI0 = new HANOI();
      HANOI.hanoi((-756), 0, 0);
      HANOI.Pair<String, Object> hANOI_Pair4 = new HANOI.Pair<String, Object>("]C`:NHb:YcK0", hANOI_Pair3);
      hANOI_Pair4.setFirst("/tm9X9Cf^&Y}i'@");
      Integer integer1 = new Integer(0);
      HANOI.Pair<Object, String> hANOI_Pair5 = (HANOI.Pair<Object, String>) mock(HANOI.Pair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hANOI_Pair5).toString();
      HANOI.Pair<Integer, HANOI.Pair<Object, String>> hANOI_Pair6 = new HANOI.Pair<Integer, HANOI.Pair<Object, String>>(integer1, hANOI_Pair5);
      hANOI_Pair6.getSecond();
      HANOI.hanoi((-756), 1, 0);
      hANOI_Pair3.toString();
      HANOI.Pair<Object, Integer> hANOI_Pair7 = new HANOI.Pair<Object, Integer>(hANOI_Pair1, (Integer) null);
      hANOI_Pair7.setFirst(integer0);
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HANOI.Pair<String, Object> hANOI_Pair0 = new HANOI.Pair<String, Object>("&L((nC", "&L((nC");
      hANOI_Pair0.setFirst("&L((nC");
      hANOI_Pair0.setSecond("&L((nC");
      HANOI.hanoi(0, 0, (-3549));
      Integer integer0 = new Integer(0);
      HANOI.Pair<Integer, String> hANOI_Pair1 = new HANOI.Pair<Integer, String>(integer0, "");
      hANOI_Pair1.setFirst(integer0);
      HANOI.Pair<Object, Object> hANOI_Pair2 = (HANOI.Pair<Object, Object>) mock(HANOI.Pair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hANOI_Pair2).toString();
      HANOI.Pair<HANOI.Pair<Object, Object>, String> hANOI_Pair3 = new HANOI.Pair<HANOI.Pair<Object, Object>, String>(hANOI_Pair2, "");
      hANOI_Pair3.setSecond("(");
      HANOI.Pair<Object, Object> hANOI_Pair4 = hANOI_Pair3.getFirst();
      assertSame(hANOI_Pair4, hANOI_Pair2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      HANOI.Pair<Integer, Object> hANOI_Pair0 = new HANOI.Pair<Integer, Object>(integer0, integer0);
      Object object0 = new Object();
      hANOI_Pair0.setSecond(object0);
      Integer.compareUnsigned((-576), (-576));
      hANOI_Pair0.setFirst(integer0);
      Integer.toUnsignedLong((-576));
      hANOI_Pair0.setFirst(integer0);
      Integer integer1 = new Integer((-1));
      hANOI_Pair0.setFirst(integer1);
      HANOI.Pair<String, String> hANOI_Pair1 = new HANOI.Pair<String, String>(">Hu.V;u4zw}02d82Q#", ">Hu.V;u4zw}02d82Q#");
      hANOI_Pair1.setFirst(">Hu.V;u4zw}02d82Q#");
      Integer integer2 = new Integer(1207);
      Integer integer3 = new Integer(1207);
      HANOI.Pair<Integer, Object> hANOI_Pair2 = new HANOI.Pair<Integer, Object>(integer3, ">Hu.V;u4zw}02d82Q#");
      Integer.min((-576), 0);
      HANOI.Pair<Object, Object> hANOI_Pair3 = new HANOI.Pair<Object, Object>(integer2, hANOI_Pair2);
      hANOI_Pair2.toString();
      hANOI_Pair3.toString();
      HANOI.Pair<Object, Object> hANOI_Pair4 = new HANOI.Pair<Object, Object>(">Hu.V;u4zw}02d82Q#", hANOI_Pair3);
      HANOI.Pair<Object, Object> hANOI_Pair5 = new HANOI.Pair<Object, Object>(hANOI_Pair4, integer1);
      hANOI_Pair5.getSecond();
      HANOI.Pair<Object, String> hANOI_Pair6 = new HANOI.Pair<Object, String>(integer2, ">Hu.V;u4zw}02d82Q#");
      HANOI.Pair<HANOI.Pair<Object, String>, Object> hANOI_Pair7 = new HANOI.Pair<HANOI.Pair<Object, String>, Object>(hANOI_Pair6, integer2);
      Integer integer4 = new Integer(0);
      HANOI.Pair<Object, Integer> hANOI_Pair8 = new HANOI.Pair<Object, Integer>(integer2, integer4);
      Integer integer5 = new Integer((-576));
      hANOI_Pair8.setSecond(integer5);
      HANOI hANOI0 = new HANOI();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HANOI hANOI0 = new HANOI();
      int int0 = 1755;
      int int1 = 1606;
      // Undeclared exception!
      try { 
        HANOI.hanoi(int0, int0, int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer.compare(0, 852);
      Integer.getInteger("((lW0");
      HANOI.Pair<Object, Object> hANOI_Pair0 = new HANOI.Pair<Object, Object>(integer0, integer0);
      hANOI_Pair0.getFirst();
      HANOI.Pair<Integer, HANOI.Pair<Object, Object>> hANOI_Pair1 = new HANOI.Pair<Integer, HANOI.Pair<Object, Object>>(integer0, hANOI_Pair0);
      hANOI_Pair1.toString();
      HANOI.Pair<Object, Object> hANOI_Pair2 = hANOI_Pair1.getSecond();
      hANOI_Pair1.setSecond(hANOI_Pair0);
      HANOI.Pair<Object, Object> hANOI_Pair3 = new HANOI.Pair<Object, Object>("(1, (1, 1))", hANOI_Pair2);
      hANOI_Pair2.toString();
      hANOI_Pair3.setFirst("((lW0");
      hANOI_Pair2.setFirst(hANOI_Pair1);
      hANOI_Pair2.getFirst();
      hANOI_Pair1.setSecond(hANOI_Pair3);
      HANOI.Pair<String, String> hANOI_Pair4 = new HANOI.Pair<String, String>("", "(1, (1, 1))");
      hANOI_Pair4.setSecond("");
      HANOI hANOI0 = new HANOI();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HANOI hANOI0 = new HANOI();
      HANOI.hanoi((-1436), (-1436), 0);
      Integer integer0 = new Integer(0);
      HANOI.Pair<Integer, String> hANOI_Pair0 = new HANOI.Pair<Integer, String>(integer0, (String) null);
      hANOI_Pair0.getFirst();
      HANOI.Pair<String, Integer> hANOI_Pair1 = new HANOI.Pair<String, Integer>((String) null, integer0);
      hANOI_Pair1.toString();
      HANOI.Pair<Object, String> hANOI_Pair2 = (HANOI.Pair<Object, String>) mock(HANOI.Pair.class, new ViolatedAssumptionAnswer());
      HANOI.Pair<HANOI.Pair<Object, String>, String> hANOI_Pair3 = new HANOI.Pair<HANOI.Pair<Object, String>, String>(hANOI_Pair2, "(null, 0)");
      hANOI_Pair1.toString();
      hANOI_Pair3.getSecond();
      Integer integer1 = new Integer(2);
      HANOI.Pair<Integer, Object> hANOI_Pair4 = new HANOI.Pair<Integer, Object>(integer1, hANOI0);
      Object object0 = hANOI_Pair4.getSecond();
      hANOI_Pair1.getSecond();
      HANOI.Pair<String, Object> hANOI_Pair5 = new HANOI.Pair<String, Object>("8cc-V", "(null, 0)");
      hANOI_Pair5.getSecond();
      hANOI_Pair5.setFirst("");
      HANOI.hanoi(3, 0, 0);
      Object object1 = new Object();
      HANOI.Pair<Object, Object> hANOI_Pair6 = new HANOI.Pair<Object, Object>(object0, object1);
      Object object2 = hANOI_Pair6.getFirst();
      assertSame(object2, hANOI0);
  }
}
