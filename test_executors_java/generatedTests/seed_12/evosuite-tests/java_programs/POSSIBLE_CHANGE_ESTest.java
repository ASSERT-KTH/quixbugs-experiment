/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 06 02:27:27 GMT 2018
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import java_programs.POSSIBLE_CHANGE;

public class POSSIBLE_CHANGE_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = new int[8];
      intArray0[0] = (-3060);
      intArray0[1] = 1;
      intArray0[2] = 1532;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-822);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change(intArray0, intArray0[1]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 328;
      intArray0[0] = 328;
      int int1 = (-568);
      intArray0[1] = (-568);
      int int2 = 0;
      intArray0[2] = 0;
      int int3 = (-1);
      intArray0[3] = (-1);
      int int4 = 0;
      intArray0[4] = 0;
      int int5 = 0;
      intArray0[5] = 0;
      int int6 = 1;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change(intArray0, int6);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-3588);
      intArray0[2] = 1;
      intArray0[3] = (-1);
      int int0 = 1082;
      intArray0[4] = 1082;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change(intArray0, intArray0[2]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int int0 = POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1771);
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, (-1382));
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1771), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int[] intArray0 = new int[0];
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 1083);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 642;
      int int0 = POSSIBLE_CHANGE.possible_change(intArray0, 642);
      assertEquals(1, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {642}, intArray0);
      
      int int1 = POSSIBLE_CHANGE.possible_change(intArray0, (-154));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {642}, intArray0);
      
      int int2 = POSSIBLE_CHANGE.possible_change(intArray0, 642);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {642}, intArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int int0 = POSSIBLE_CHANGE.possible_change((int[]) null, (-2119));
      assertEquals(0, int0);
      
      int int1 = POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = POSSIBLE_CHANGE.possible_change((int[]) null, (-2119));
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = POSSIBLE_CHANGE.possible_change((int[]) null, (-1));
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      assertEquals(1, int5);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
