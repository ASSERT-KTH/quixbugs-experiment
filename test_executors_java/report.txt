
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: LEVENSHTEIN under path ./patchedPrograms/levenshtein/cardumen/p1
Patch:

--- java_programs\/LEVENSHTEIN.java
+++ java_programs\/LEVENSHTEIN.java
@@ -7,7 +7,7 @@
 			return source.isEmpty() ? target.length() : source.length();
 		}else
 			if ((source.charAt(0)) == (target.charAt(0))) {
-				return 1 + (java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1)));
+				return java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1));
 			}else {
 				return 1 + (java.lang.Math.min(java.lang.Math.min(java_programs.LEVENSHTEIN.levenshtein(source, target.substring(1)), java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1))), java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target)));
 			}


failed tests number: 13
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: GET_FACTORS under path ./patchedPrograms/get_factors/cardumen/p1
Patch:

--- java_programs\/GET_FACTORS.java
+++ java_programs\/GET_FACTORS.java
@@ -7,7 +7,7 @@
 			return new java.util.ArrayList<java.lang.Integer>();
 		}
 		int max = ((int) ((java.lang.Math.sqrt(n)) + 1.0));
-		for (int i = 2; i < max; i++) {
+		for (int i = 2; (n % n) == 0; i++) {
 			if ((n % i) == 0) {
 				java.util.ArrayList<java.lang.Integer> prepend = new java.util.ArrayList<java.lang.Integer>(0);
 				prepend.add(i);


failed tests number: 20
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: POWERSET under path ./patchedPrograms/powerset/tibra/p1
Patch:

--- java_programs\/POWERSET.java
+++ java_programs\/POWERSET.java
@@ -18,7 +18,7 @@
 			}
 			output.addAll(to_add);
 			rest_subsets.addAll(output);
-			return output;
+			return rest_subsets;
 		}else {
 			java.util.ArrayList empty_set = new java.util.ArrayList<java.util.ArrayList>();
 			empty_set.add(new java.util.ArrayList());


passed all tests 
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: NEXT_PERMUTATION under path ./patchedPrograms/next_permutation/mutation/p1
Patch:

--- java_programs\/NEXT_PERMUTATION.java
+++ java_programs\/NEXT_PERMUTATION.java
@@ -6,7 +6,7 @@
 		for (int i = (perm.size()) - 2; i != (-1); i--) {
 			if ((perm.get(i)) < (perm.get((i + 1)))) {
 				for (int j = (perm.size()) - 1; j != i; j--) {
-					if ((perm.get(j)) < (perm.get(i))) {
+					if ((perm.get(j)) >= (perm.get(i))) {
 						java.util.ArrayList<java.lang.Integer> next_perm = perm;
 						int temp_j = perm.get(j);
 						int temp_i = perm.get(i);


passed all tests 
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: RPN_EVAL under path ./patchedPrograms/rpn_eval/cardumen/p1
Patch:

--- java_programs\/RPN_EVAL.java
+++ java_programs\/RPN_EVAL.java
@@ -18,7 +18,7 @@
 				java.lang.Double b = ((java.lang.Double) (stack.pop()));
 				java.lang.Double c = 0.0;
 				java.util.function.BinaryOperator<java.lang.Double> bin_op = op.get(token);
-				c = bin_op.apply(a, b);
+				c = bin_op.apply(b, a);
 				stack.push(c);
 			}
 		}


passed all tests 
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: LIS under path ./patchedPrograms/lis/statement/p1
Patch:

--- java_programs\/LIS.java
+++ java_programs\/LIS.java
@@ -14,6 +14,7 @@
 				}
 			}
 			int length = (!(prefix_lengths.isEmpty())) ? java.util.Collections.max(prefix_lengths) : 0;
+			ends.put((length + 1), i);
 			if ((length == longest) || (val < (arr[ends.get((length + 1))]))) {
 				ends.put((length + 1), i);
 				longest = length + 1;


passed all tests 
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: FIND_IN_SORTED under path ./patchedPrograms/find_in_sorted/nopol-smt/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/FIND_IN_SORTED.java
+++ nopol-quixbugs/src/main/java/java_programs/FIND_IN_SORTED.java
@@ -16,3 +16,3 @@
         int mid = start + (end - start) / 2; // check this is floor division
-        if (x < arr[mid]) {
+        if ((mid <= 2) || (((x) != ((arr[mid]))) && (!(arr.length < (arr[mid]))))) {
             return binsearch(arr, x, start, mid);

failed tests number: 20
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: IS_VALID_PARENTHESIZATION under path ./patchedPrograms/is_valid_parenthesization/nopol-smt/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/IS_VALID_PARENTHESIZATION.java
+++ nopol-quixbugs/src/main/java/java_programs/IS_VALID_PARENTHESIZATION.java
@@ -16,7 +16,7 @@
 	    Character paren = parens.charAt(i);
-	    if (paren.equals('(')) {
-                depth++;
+	    if ((1 < (parens.length()) - (1)) && ((paren) != (1 + '('))) {
+	        depth++;
 	    } else {
-		depth--;
-		if (depth < 0) { return false; }
+	        depth--;
+	        if (depth < 0) { return false; }
 	    }

failed tests number: 20
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: KNAPSACK under path ./patchedPrograms/knapsack/mutation/p1
Patch:

--- java_programs\/KNAPSACK.java
+++ java_programs\/KNAPSACK.java
@@ -16,7 +16,7 @@
 				if ((i == 0) || (j == 0)) {
 					memo[i][j] = 0;
 				}else
-					if (weight < j) {
+					if (weight <= j) {
 						memo[i][j] = java.lang.Math.max(memo[(i - 1)][j], (value + (memo[(i - 1)][(j - weight)])));
 					}else {
 						memo[i][j] = memo[(i - 1)][j];


failed tests number: 2
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: QUICKSORT under path ./patchedPrograms/quicksort/nopol-dynamoth/p1
Patch:
--- nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
+++ nopol-quixbugs/src/main/java/java_programs/QUICKSORT.java
@@ -25,3 +25,3 @@
                 lesser.add(x);
-            } else if (x > pivot) {
+            } else if (arr.contains((java.lang.Object) pivot)) {
                 greater.add(x);

passed all tests 
Wed Mar 07 23:56:24 CET 2018 - Analyzing patched program: MERGESORT under path ./patchedPrograms/mergesort/cardumen/p1
Patch:

--- java_programs\/MERGESORT.java
+++ java_programs\/MERGESORT.java
@@ -20,11 +20,17 @@
 	}
 
 	public static java.util.ArrayList<java.lang.Integer> mergesort(java.util.ArrayList<java.lang.Integer> arr) {
-		if ((arr.size()) == 0) {
+		if (((arr.size()) / 2) == 0) {
 			return arr;
 		}else {
 			int middle = (arr.size()) / 2;
 			java.util.ArrayList<java.lang.Integer> left = new java.util.ArrayList<java.lang.Integer>(100);
			left.addAll(arr.subList(0, middle));
			left = java_programs.MERGESORT.mergesort(left);
			java.util.ArrayList<java.lang.Integer> right = new java.util.ArrayList<java.lang.Integer>(100);
			right.addAll(arr.subList(middle, arr.size()));
			right = java_programs.MERGESORT.mergesort(right);
			return java_programs.MERGESORT.merge(left, right);
 		}
 	}
 }


passed all tests 