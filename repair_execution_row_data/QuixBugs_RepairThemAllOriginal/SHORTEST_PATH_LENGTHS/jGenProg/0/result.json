{
  "repair_end": "2020-06-08 01:07:24.436045", 
  "repair_begin": "2020-06-07 23:02:21.666745", 
  "patches": [
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26", 
      "VARIANT_ID": "52", 
      "TIME": "3", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41", 
      "VARIANT_ID": "82", 
      "TIME": "4", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51", 
      "VARIANT_ID": "102", 
      "TIME": "5", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-264\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "132", 
      "VARIANT_ID": "264", 
      "TIME": "12", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-264"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-330\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "165", 
      "VARIANT_ID": "330", 
      "TIME": "15", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-330"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-350\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "175", 
      "VARIANT_ID": "350", 
      "TIME": "16", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-350"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-640\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "320", 
      "VARIANT_ID": "640", 
      "TIME": "29", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-640"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-658\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "329", 
      "VARIANT_ID": "658", 
      "TIME": "30", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-658"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-670\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "335", 
      "VARIANT_ID": "670", 
      "TIME": "31", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-670"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-764\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "382", 
      "VARIANT_ID": "764", 
      "TIME": "35", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-764"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-902\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "451", 
      "VARIANT_ID": "902", 
      "TIME": "41", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-902"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1088\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "544", 
      "VARIANT_ID": "1088", 
      "TIME": "49", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1088"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1280\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "640", 
      "VARIANT_ID": "1280", 
      "TIME": "58", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1280"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1288\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "644", 
      "VARIANT_ID": "1288", 
      "TIME": "58", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1288"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1308\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "654", 
      "VARIANT_ID": "1308", 
      "TIME": "59", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1308"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "663", 
      "VARIANT_ID": "1326", 
      "TIME": "61", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1384\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "692", 
      "VARIANT_ID": "1384", 
      "TIME": "63", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1384"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1510\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "755", 
      "VARIANT_ID": "1510", 
      "TIME": "69", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1510"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1638\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "819", 
      "VARIANT_ID": "1638", 
      "TIME": "74", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1638"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-1990\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "995", 
      "VARIANT_ID": "1990", 
      "TIME": "88", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-1990"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-2070\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1035", 
      "VARIANT_ID": "2070", 
      "TIME": "91", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-2070"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-2340\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1170", 
      "VARIANT_ID": "2340", 
      "TIME": "102", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-2340"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-2424\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1212", 
      "VARIANT_ID": "2424", 
      "TIME": "106", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-2424"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-2474\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1237", 
      "VARIANT_ID": "2474", 
      "TIME": "108", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-2474"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-2908\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1454", 
      "VARIANT_ID": "2908", 
      "TIME": "127", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-2908"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3082\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1541", 
      "VARIANT_ID": "3082", 
      "TIME": "135", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3082"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3096\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1548", 
      "VARIANT_ID": "3096", 
      "TIME": "135", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3096"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3134\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1567", 
      "VARIANT_ID": "3134", 
      "TIME": "137", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3134"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3142\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1571", 
      "VARIANT_ID": "3142", 
      "TIME": "138", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3142"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3350\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1675", 
      "VARIANT_ID": "3350", 
      "TIME": "146", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3350"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3574\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1787", 
      "VARIANT_ID": "3574", 
      "TIME": "155", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3574"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3596\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1798", 
      "VARIANT_ID": "3596", 
      "TIME": "156", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3596"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3746\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1873", 
      "VARIANT_ID": "3746", 
      "TIME": "162", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3746"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-3942\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "1971", 
      "VARIANT_ID": "3942", 
      "TIME": "170", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-3942"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-4176\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2088", 
      "VARIANT_ID": "4176", 
      "TIME": "179", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-4176"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-4238\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2119", 
      "VARIANT_ID": "4238", 
      "TIME": "182", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-4238"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-4856\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2428", 
      "VARIANT_ID": "4856", 
      "TIME": "207", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-4856"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-5048\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2524", 
      "VARIANT_ID": "5048", 
      "TIME": "216", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-5048"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-5160\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2580", 
      "VARIANT_ID": "5160", 
      "TIME": "221", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-5160"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-5480\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2740", 
      "VARIANT_ID": "5480", 
      "TIME": "234", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-5480"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-5484\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2742", 
      "VARIANT_ID": "5484", 
      "TIME": "234", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-5484"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-5890\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "2945", 
      "VARIANT_ID": "5890", 
      "TIME": "253", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-5890"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6006\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3003", 
      "VARIANT_ID": "6006", 
      "TIME": "258", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6006"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6090\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3045", 
      "VARIANT_ID": "6090", 
      "TIME": "262", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6090"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6158\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3079", 
      "VARIANT_ID": "6158", 
      "TIME": "265", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6158"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6230\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3115", 
      "VARIANT_ID": "6230", 
      "TIME": "268", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6230"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6264\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3132", 
      "VARIANT_ID": "6264", 
      "TIME": "269", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6264"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6314\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3157", 
      "VARIANT_ID": "6314", 
      "TIME": "272", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6314"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6532\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3266", 
      "VARIANT_ID": "6532", 
      "TIME": "281", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6532"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6598\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3299", 
      "VARIANT_ID": "6598", 
      "TIME": "284", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6598"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6674\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3337", 
      "VARIANT_ID": "6674", 
      "TIME": "287", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6674"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6900\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3450", 
      "VARIANT_ID": "6900", 
      "TIME": "297", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6900"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6928\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3464", 
      "VARIANT_ID": "6928", 
      "TIME": "299", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6928"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6944\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3472", 
      "VARIANT_ID": "6944", 
      "TIME": "300", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6944"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-6978\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3489", 
      "VARIANT_ID": "6978", 
      "TIME": "301", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-6978"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7142\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3571", 
      "VARIANT_ID": "7142", 
      "TIME": "309", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7142"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7218\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3609", 
      "VARIANT_ID": "7218", 
      "TIME": "312", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7218"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7226\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3613", 
      "VARIANT_ID": "7226", 
      "TIME": "312", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7226"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7350\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3675", 
      "VARIANT_ID": "7350", 
      "TIME": "318", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7350"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7430\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3715", 
      "VARIANT_ID": "7430", 
      "TIME": "321", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7430"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7482\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3741", 
      "VARIANT_ID": "7482", 
      "TIME": "324", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7482"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7734\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3867", 
      "VARIANT_ID": "7734", 
      "TIME": "334", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7734"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7740\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3870", 
      "VARIANT_ID": "7740", 
      "TIME": "334", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7740"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7808\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3904", 
      "VARIANT_ID": "7808", 
      "TIME": "337", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7808"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-7904\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "3952", 
      "VARIANT_ID": "7904", 
      "TIME": "341", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-7904"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8268\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4134", 
      "VARIANT_ID": "8268", 
      "TIME": "357", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8268"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8312\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4156", 
      "VARIANT_ID": "8312", 
      "TIME": "359", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8312"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4163", 
      "VARIANT_ID": "8326", 
      "TIME": "360", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8698\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4349", 
      "VARIANT_ID": "8698", 
      "TIME": "376", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8698"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8742\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4371", 
      "VARIANT_ID": "8742", 
      "TIME": "379", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8742"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8832\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4416", 
      "VARIANT_ID": "8832", 
      "TIME": "384", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8832"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8840\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4420", 
      "VARIANT_ID": "8840", 
      "TIME": "384", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8840"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8864\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4432", 
      "VARIANT_ID": "8864", 
      "TIME": "385", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8864"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-8946\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4473", 
      "VARIANT_ID": "8946", 
      "TIME": "389", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-8946"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9048\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4524", 
      "VARIANT_ID": "9048", 
      "TIME": "394", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9048"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9058\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4529", 
      "VARIANT_ID": "9058", 
      "TIME": "395", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9058"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9132\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4566", 
      "VARIANT_ID": "9132", 
      "TIME": "399", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9132"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9172\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4586", 
      "VARIANT_ID": "9172", 
      "TIME": "400", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9172"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9198\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4599", 
      "VARIANT_ID": "9198", 
      "TIME": "401", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9198"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9574\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4787", 
      "VARIANT_ID": "9574", 
      "TIME": "418", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9574"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-9814\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "4907", 
      "VARIANT_ID": "9814", 
      "TIME": "429", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-9814"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10054\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5027", 
      "VARIANT_ID": "10054", 
      "TIME": "438", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10054"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10208\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5104", 
      "VARIANT_ID": "10208", 
      "TIME": "446", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10208"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10292\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5146", 
      "VARIANT_ID": "10292", 
      "TIME": "449", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10292"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10496\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5248", 
      "VARIANT_ID": "10496", 
      "TIME": "459", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10496"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10600\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5300", 
      "VARIANT_ID": "10600", 
      "TIME": "463", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10600"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10784\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5392", 
      "VARIANT_ID": "10784", 
      "TIME": "471", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10784"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10844\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5422", 
      "VARIANT_ID": "10844", 
      "TIME": "473", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10844"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10918\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5459", 
      "VARIANT_ID": "10918", 
      "TIME": "476", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10918"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-10974\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5487", 
      "VARIANT_ID": "10974", 
      "TIME": "479", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-10974"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11098\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5549", 
      "VARIANT_ID": "11098", 
      "TIME": "485", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11098"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11362\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5681", 
      "VARIANT_ID": "11362", 
      "TIME": "496", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11362"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11410\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5705", 
      "VARIANT_ID": "11410", 
      "TIME": "498", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11410"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11414\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5707", 
      "VARIANT_ID": "11414", 
      "TIME": "499", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11414"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11416\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5708", 
      "VARIANT_ID": "11416", 
      "TIME": "499", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11416"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11442\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5721", 
      "VARIANT_ID": "11442", 
      "TIME": "500", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11442"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11538\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5769", 
      "VARIANT_ID": "11538", 
      "TIME": "504", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11538"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11620\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5810", 
      "VARIANT_ID": "11620", 
      "TIME": "507", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11620"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11762\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5881", 
      "VARIANT_ID": "11762", 
      "TIME": "513", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11762"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11786\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5893", 
      "VARIANT_ID": "11786", 
      "TIME": "514", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11786"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11808\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5904", 
      "VARIANT_ID": "11808", 
      "TIME": "515", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11808"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11858\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5929", 
      "VARIANT_ID": "11858", 
      "TIME": "517", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11858"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11926\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5963", 
      "VARIANT_ID": "11926", 
      "TIME": "520", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11926"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-11994\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "5997", 
      "VARIANT_ID": "11994", 
      "TIME": "523", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-11994"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12076\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6038", 
      "VARIANT_ID": "12076", 
      "TIME": "527", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12076"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12238\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6119", 
      "VARIANT_ID": "12238", 
      "TIME": "533", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12238"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12542\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6271", 
      "VARIANT_ID": "12542", 
      "TIME": "547", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12542"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12572\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6286", 
      "VARIANT_ID": "12572", 
      "TIME": "548", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12572"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12640\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6320", 
      "VARIANT_ID": "12640", 
      "TIME": "551", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12640"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12712\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6356", 
      "VARIANT_ID": "12712", 
      "TIME": "555", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12712"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12732\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6366", 
      "VARIANT_ID": "12732", 
      "TIME": "556", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12732"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12816\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6408", 
      "VARIANT_ID": "12816", 
      "TIME": "560", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12816"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12822\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6411", 
      "VARIANT_ID": "12822", 
      "TIME": "560", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12822"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-12964\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6482", 
      "VARIANT_ID": "12964", 
      "TIME": "566", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-12964"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13252\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6626", 
      "VARIANT_ID": "13252", 
      "TIME": "578", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13252"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13316\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6658", 
      "VARIANT_ID": "13316", 
      "TIME": "581", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13316"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13556\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6778", 
      "VARIANT_ID": "13556", 
      "TIME": "591", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13556"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13606\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6803", 
      "VARIANT_ID": "13606", 
      "TIME": "594", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13606"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13730\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6865", 
      "VARIANT_ID": "13730", 
      "TIME": "599", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13730"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13904\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6952", 
      "VARIANT_ID": "13904", 
      "TIME": "607", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13904"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13910\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6955", 
      "VARIANT_ID": "13910", 
      "TIME": "607", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13910"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-13992\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "6996", 
      "VARIANT_ID": "13992", 
      "TIME": "611", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-13992"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-14084\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7042", 
      "VARIANT_ID": "14084", 
      "TIME": "614", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-14084"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-14228\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7114", 
      "VARIANT_ID": "14228", 
      "TIME": "620", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-14228"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-14304\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7152", 
      "VARIANT_ID": "14304", 
      "TIME": "624", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-14304"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-14426\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7213", 
      "VARIANT_ID": "14426", 
      "TIME": "629", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-14426"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-14496\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7248", 
      "VARIANT_ID": "14496", 
      "TIME": "632", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-14496"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15006\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7503", 
      "VARIANT_ID": "15006", 
      "TIME": "656", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15006"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15026\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7513", 
      "VARIANT_ID": "15026", 
      "TIME": "657", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15026"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15090\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7545", 
      "VARIANT_ID": "15090", 
      "TIME": "660", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15090"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15108\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7554", 
      "VARIANT_ID": "15108", 
      "TIME": "661", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15108"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15472\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7736", 
      "VARIANT_ID": "15472", 
      "TIME": "676", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15472"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15756\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7878", 
      "VARIANT_ID": "15756", 
      "TIME": "688", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15756"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-15950\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "7975", 
      "VARIANT_ID": "15950", 
      "TIME": "697", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-15950"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16028\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8014", 
      "VARIANT_ID": "16028", 
      "TIME": "701", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16028"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16066\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8033", 
      "VARIANT_ID": "16066", 
      "TIME": "702", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16066"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16210\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8105", 
      "VARIANT_ID": "16210", 
      "TIME": "709", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16210"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16282\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8141", 
      "VARIANT_ID": "16282", 
      "TIME": "712", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16282"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16294\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8147", 
      "VARIANT_ID": "16294", 
      "TIME": "713", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16294"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16522\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8261", 
      "VARIANT_ID": "16522", 
      "TIME": "722", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16522"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16576\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8288", 
      "VARIANT_ID": "16576", 
      "TIME": "725", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16576"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16622\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8311", 
      "VARIANT_ID": "16622", 
      "TIME": "727", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16622"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16674\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8337", 
      "VARIANT_ID": "16674", 
      "TIME": "729", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16674"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16720\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8360", 
      "VARIANT_ID": "16720", 
      "TIME": "731", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16720"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-16856\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8428", 
      "VARIANT_ID": "16856", 
      "TIME": "737", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-16856"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17010\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8505", 
      "VARIANT_ID": "17010", 
      "TIME": "744", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17010"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17116\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8558", 
      "VARIANT_ID": "17116", 
      "TIME": "749", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17116"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17134\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8567", 
      "VARIANT_ID": "17134", 
      "TIME": "750", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17134"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17296\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8648", 
      "VARIANT_ID": "17296", 
      "TIME": "757", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17296"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17404\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8702", 
      "VARIANT_ID": "17404", 
      "TIME": "761", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17404"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17442\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8721", 
      "VARIANT_ID": "17442", 
      "TIME": "763", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17442"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17554\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8777", 
      "VARIANT_ID": "17554", 
      "TIME": "768", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17554"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17698\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8849", 
      "VARIANT_ID": "17698", 
      "TIME": "774", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17698"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17778\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8889", 
      "VARIANT_ID": "17778", 
      "TIME": "778", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17778"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17902\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8951", 
      "VARIANT_ID": "17902", 
      "TIME": "783", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17902"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-17948\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "8974", 
      "VARIANT_ID": "17948", 
      "TIME": "786", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-17948"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-18172\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9086", 
      "VARIANT_ID": "18172", 
      "TIME": "796", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-18172"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-18182\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9091", 
      "VARIANT_ID": "18182", 
      "TIME": "797", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-18182"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-18194\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9097", 
      "VARIANT_ID": "18194", 
      "TIME": "798", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-18194"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-18224\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9112", 
      "VARIANT_ID": "18224", 
      "TIME": "800", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-18224"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19030\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9515", 
      "VARIANT_ID": "19030", 
      "TIME": "841", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19030"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19254\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9627", 
      "VARIANT_ID": "19254", 
      "TIME": "854", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19254"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19350\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9675", 
      "VARIANT_ID": "19350", 
      "TIME": "860", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19350"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19512\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9756", 
      "VARIANT_ID": "19512", 
      "TIME": "869", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19512"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19532\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9766", 
      "VARIANT_ID": "19532", 
      "TIME": "871", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19532"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-19728\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "9864", 
      "VARIANT_ID": "19728", 
      "TIME": "883", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-19728"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20142\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10071", 
      "VARIANT_ID": "20142", 
      "TIME": "918", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20142"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20228\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10114", 
      "VARIANT_ID": "20228", 
      "TIME": "930", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20228"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20468\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10234", 
      "VARIANT_ID": "20468", 
      "TIME": "953", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20468"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20544\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10272", 
      "VARIANT_ID": "20544", 
      "TIME": "961", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20544"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20558\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10279", 
      "VARIANT_ID": "20558", 
      "TIME": "962", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20558"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20584\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10292", 
      "VARIANT_ID": "20584", 
      "TIME": "966", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20584"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20692\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10346", 
      "VARIANT_ID": "20692", 
      "TIME": "975", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20692"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20730\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10365", 
      "VARIANT_ID": "20730", 
      "TIME": "979", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20730"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20938\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10469", 
      "VARIANT_ID": "20938", 
      "TIME": "997", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20938"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-20956\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10478", 
      "VARIANT_ID": "20956", 
      "TIME": "999", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-20956"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21064\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10532", 
      "VARIANT_ID": "21064", 
      "TIME": "1007", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21064"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21152\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10576", 
      "VARIANT_ID": "21152", 
      "TIME": "1014", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21152"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21244\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10622", 
      "VARIANT_ID": "21244", 
      "TIME": "1022", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21244"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21264\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10632", 
      "VARIANT_ID": "21264", 
      "TIME": "1024", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21264"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21294\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10647", 
      "VARIANT_ID": "21294", 
      "TIME": "1026", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21294"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21530\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10765", 
      "VARIANT_ID": "21530", 
      "TIME": "1044", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21530"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21614\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10807", 
      "VARIANT_ID": "21614", 
      "TIME": "1050", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21614"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21672\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10836", 
      "VARIANT_ID": "21672", 
      "TIME": "1054", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21672"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21716\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10858", 
      "VARIANT_ID": "21716", 
      "TIME": "1057", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21716"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-21904\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "10952", 
      "VARIANT_ID": "21904", 
      "TIME": "1072", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-21904"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22004\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11002", 
      "VARIANT_ID": "22004", 
      "TIME": "1080", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22004"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22028\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11014", 
      "VARIANT_ID": "22028", 
      "TIME": "1082", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22028"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22030\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11015", 
      "VARIANT_ID": "22030", 
      "TIME": "1082", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22030"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22130\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11065", 
      "VARIANT_ID": "22130", 
      "TIME": "1089", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22130"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22144\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11072", 
      "VARIANT_ID": "22144", 
      "TIME": "1091", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22144"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22146\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11073", 
      "VARIANT_ID": "22146", 
      "TIME": "1091", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22146"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22534\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11267", 
      "VARIANT_ID": "22534", 
      "TIME": "1118", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22534"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22656\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11328", 
      "VARIANT_ID": "22656", 
      "TIME": "1126", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22656"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-22962\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11481", 
      "VARIANT_ID": "22962", 
      "TIME": "1146", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-22962"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23020\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11510", 
      "VARIANT_ID": "23020", 
      "TIME": "1150", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23020"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23024\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11512", 
      "VARIANT_ID": "23024", 
      "TIME": "1150", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23024"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23052\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11526", 
      "VARIANT_ID": "23052", 
      "TIME": "1153", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23052"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23122\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11561", 
      "VARIANT_ID": "23122", 
      "TIME": "1158", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23122"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23132\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11566", 
      "VARIANT_ID": "23132", 
      "TIME": "1159", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23132"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23144\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11572", 
      "VARIANT_ID": "23144", 
      "TIME": "1160", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23144"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23272\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11636", 
      "VARIANT_ID": "23272", 
      "TIME": "1168", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23272"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11672", 
      "VARIANT_ID": "23344", 
      "TIME": "1173", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23356\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11678", 
      "VARIANT_ID": "23356", 
      "TIME": "1174", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23356"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23396\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11698", 
      "VARIANT_ID": "23396", 
      "TIME": "1178", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23396"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23526\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11763", 
      "VARIANT_ID": "23526", 
      "TIME": "1186", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23526"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23784\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11892", 
      "VARIANT_ID": "23784", 
      "TIME": "1201", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23784"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-23840\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "11920", 
      "VARIANT_ID": "23840", 
      "TIME": "1204", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-23840"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24234\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12117", 
      "VARIANT_ID": "24234", 
      "TIME": "1228", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24234"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24268\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12134", 
      "VARIANT_ID": "24268", 
      "TIME": "1229", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24268"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24490\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12245", 
      "VARIANT_ID": "24490", 
      "TIME": "1244", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24490"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24596\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12298", 
      "VARIANT_ID": "24596", 
      "TIME": "1252", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24596"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24632\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12316", 
      "VARIANT_ID": "24632", 
      "TIME": "1254", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24632"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24826\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12413", 
      "VARIANT_ID": "24826", 
      "TIME": "1266", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24826"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24930\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12465", 
      "VARIANT_ID": "24930", 
      "TIME": "1272", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24930"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-24984\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12492", 
      "VARIANT_ID": "24984", 
      "TIME": "1275", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-24984"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25082\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12541", 
      "VARIANT_ID": "25082", 
      "TIME": "1281", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25082"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25318\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12659", 
      "VARIANT_ID": "25318", 
      "TIME": "1296", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25318"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12663", 
      "VARIANT_ID": "25326", 
      "TIME": "1296", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25472\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12736", 
      "VARIANT_ID": "25472", 
      "TIME": "1305", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25472"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25510\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12755", 
      "VARIANT_ID": "25510", 
      "TIME": "1308", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25510"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-25514\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "12757", 
      "VARIANT_ID": "25514", 
      "TIME": "1308", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-25514"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26036\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13018", 
      "VARIANT_ID": "26036", 
      "TIME": "1340", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26036"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26054\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13027", 
      "VARIANT_ID": "26054", 
      "TIME": "1341", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26054"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26074\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13037", 
      "VARIANT_ID": "26074", 
      "TIME": "1343", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26074"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26166\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13083", 
      "VARIANT_ID": "26166", 
      "TIME": "1348", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26166"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26318\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13159", 
      "VARIANT_ID": "26318", 
      "TIME": "1358", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26318"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26454\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13227", 
      "VARIANT_ID": "26454", 
      "TIME": "1366", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26454"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26492\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13246", 
      "VARIANT_ID": "26492", 
      "TIME": "1369", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26492"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26678\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13339", 
      "VARIANT_ID": "26678", 
      "TIME": "1381", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26678"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-26872\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13436", 
      "VARIANT_ID": "26872", 
      "TIME": "1392", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-26872"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27054\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13527", 
      "VARIANT_ID": "27054", 
      "TIME": "1403", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27054"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27280\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13640", 
      "VARIANT_ID": "27280", 
      "TIME": "1418", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27280"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27298\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13649", 
      "VARIANT_ID": "27298", 
      "TIME": "1419", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27298"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27306\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13653", 
      "VARIANT_ID": "27306", 
      "TIME": "1419", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27306"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27444\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13722", 
      "VARIANT_ID": "27444", 
      "TIME": "1429", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27444"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27496\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13748", 
      "VARIANT_ID": "27496", 
      "TIME": "1431", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27496"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27566\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13783", 
      "VARIANT_ID": "27566", 
      "TIME": "1435", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27566"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27574\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13787", 
      "VARIANT_ID": "27574", 
      "TIME": "1437", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27574"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27620\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13810", 
      "VARIANT_ID": "27620", 
      "TIME": "1439", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27620"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27712\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13856", 
      "VARIANT_ID": "27712", 
      "TIME": "1445", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27712"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27914\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13957", 
      "VARIANT_ID": "27914", 
      "TIME": "1456", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27914"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-27976\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "13988", 
      "VARIANT_ID": "27976", 
      "TIME": "1460", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-27976"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28292\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14146", 
      "VARIANT_ID": "28292", 
      "TIME": "1480", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28292"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28462\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14231", 
      "VARIANT_ID": "28462", 
      "TIME": "1490", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28462"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28564\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14282", 
      "VARIANT_ID": "28564", 
      "TIME": "1497", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28564"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28630\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14315", 
      "VARIANT_ID": "28630", 
      "TIME": "1501", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28630"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28732\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14366", 
      "VARIANT_ID": "28732", 
      "TIME": "1507", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28732"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-28784\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14392", 
      "VARIANT_ID": "28784", 
      "TIME": "1511", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-28784"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29424\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14712", 
      "VARIANT_ID": "29424", 
      "TIME": "1548", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29424"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29440\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14720", 
      "VARIANT_ID": "29440", 
      "TIME": "1549", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29440"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29484\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14742", 
      "VARIANT_ID": "29484", 
      "TIME": "1551", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29484"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29546\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14773", 
      "VARIANT_ID": "29546", 
      "TIME": "1554", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29546"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29606\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14803", 
      "VARIANT_ID": "29606", 
      "TIME": "1558", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29606"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29822\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14911", 
      "VARIANT_ID": "29822", 
      "TIME": "1571", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29822"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-29980\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "14990", 
      "VARIANT_ID": "29980", 
      "TIME": "1580", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-29980"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30210\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15105", 
      "VARIANT_ID": "30210", 
      "TIME": "1595", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30210"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30386\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15193", 
      "VARIANT_ID": "30386", 
      "TIME": "1604", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30386"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30780\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15390", 
      "VARIANT_ID": "30780", 
      "TIME": "1630", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30780"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30814\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15407", 
      "VARIANT_ID": "30814", 
      "TIME": "1632", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30814"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30880\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15440", 
      "VARIANT_ID": "30880", 
      "TIME": "1635", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30880"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30938\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15469", 
      "VARIANT_ID": "30938", 
      "TIME": "1639", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30938"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-30950\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15475", 
      "VARIANT_ID": "30950", 
      "TIME": "1640", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-30950"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31150\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15575", 
      "VARIANT_ID": "31150", 
      "TIME": "1652", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31150"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31176\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15588", 
      "VARIANT_ID": "31176", 
      "TIME": "1654", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31176"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31200\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15600", 
      "VARIANT_ID": "31200", 
      "TIME": "1655", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31200"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31258\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15629", 
      "VARIANT_ID": "31258", 
      "TIME": "1658", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31258"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31334\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15667", 
      "VARIANT_ID": "31334", 
      "TIME": "1662", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31334"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31342\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15671", 
      "VARIANT_ID": "31342", 
      "TIME": "1662", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31342"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31474\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15737", 
      "VARIANT_ID": "31474", 
      "TIME": "1672", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31474"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31478\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15739", 
      "VARIANT_ID": "31478", 
      "TIME": "1673", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31478"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31652\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15826", 
      "VARIANT_ID": "31652", 
      "TIME": "1683", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31652"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31864\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15932", 
      "VARIANT_ID": "31864", 
      "TIME": "1694", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31864"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-31918\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "15959", 
      "VARIANT_ID": "31918", 
      "TIME": "1697", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-31918"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32002\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16001", 
      "VARIANT_ID": "32002", 
      "TIME": "1703", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32002"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32038\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16019", 
      "VARIANT_ID": "32038", 
      "TIME": "1705", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32038"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32270\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16135", 
      "VARIANT_ID": "32270", 
      "TIME": "1717", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32270"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32388\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16194", 
      "VARIANT_ID": "32388", 
      "TIME": "1723", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32388"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32616\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16308", 
      "VARIANT_ID": "32616", 
      "TIME": "1736", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32616"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32824\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16412", 
      "VARIANT_ID": "32824", 
      "TIME": "1747", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32824"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-32894\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16447", 
      "VARIANT_ID": "32894", 
      "TIME": "1751", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-32894"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-33334\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16667", 
      "VARIANT_ID": "33334", 
      "TIME": "1774", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-33334"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-33494\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16747", 
      "VARIANT_ID": "33494", 
      "TIME": "1784", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-33494"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-33718\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16859", 
      "VARIANT_ID": "33718", 
      "TIME": "1796", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-33718"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-33900\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16950", 
      "VARIANT_ID": "33900", 
      "TIME": "1807", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-33900"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-33994\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "16997", 
      "VARIANT_ID": "33994", 
      "TIME": "1812", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-33994"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34108\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17054", 
      "VARIANT_ID": "34108", 
      "TIME": "1817", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34108"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34378\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17189", 
      "VARIANT_ID": "34378", 
      "TIME": "1833", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34378"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34394\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17197", 
      "VARIANT_ID": "34394", 
      "TIME": "1833", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34394"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17224", 
      "VARIANT_ID": "34448", 
      "TIME": "1836", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34524\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17262", 
      "VARIANT_ID": "34524", 
      "TIME": "1841", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34524"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34538\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17269", 
      "VARIANT_ID": "34538", 
      "TIME": "1842", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34538"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34554\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17277", 
      "VARIANT_ID": "34554", 
      "TIME": "1843", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34554"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-34980\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17490", 
      "VARIANT_ID": "34980", 
      "TIME": "1867", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-34980"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-35092\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17546", 
      "VARIANT_ID": "35092", 
      "TIME": "1873", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-35092"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-35200\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17600", 
      "VARIANT_ID": "35200", 
      "TIME": "1878", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-35200"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-35680\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17840", 
      "VARIANT_ID": "35680", 
      "TIME": "1905", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-35680"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-35710\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "17855", 
      "VARIANT_ID": "35710", 
      "TIME": "1907", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-35710"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36002\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18001", 
      "VARIANT_ID": "36002", 
      "TIME": "1923", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36002"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36062\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18031", 
      "VARIANT_ID": "36062", 
      "TIME": "1926", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36062"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36120\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18060", 
      "VARIANT_ID": "36120", 
      "TIME": "1929", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36120"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36244\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18122", 
      "VARIANT_ID": "36244", 
      "TIME": "1936", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36244"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36290\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18145", 
      "VARIANT_ID": "36290", 
      "TIME": "1939", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36290"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36322\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18161", 
      "VARIANT_ID": "36322", 
      "TIME": "1940", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36322"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18163", 
      "VARIANT_ID": "36326", 
      "TIME": "1941", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36354\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18177", 
      "VARIANT_ID": "36354", 
      "TIME": "1943", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36354"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36500\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18250", 
      "VARIANT_ID": "36500", 
      "TIME": "1951", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36500"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36570\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18285", 
      "VARIANT_ID": "36570", 
      "TIME": "1955", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36570"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36838\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18419", 
      "VARIANT_ID": "36838", 
      "TIME": "1968", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36838"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-36938\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18469", 
      "VARIANT_ID": "36938", 
      "TIME": "1974", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-36938"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-37082\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18541", 
      "VARIANT_ID": "37082", 
      "TIME": "1983", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-37082"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-37390\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18695", 
      "VARIANT_ID": "37390", 
      "TIME": "2001", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-37390"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-37978\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "18989", 
      "VARIANT_ID": "37978", 
      "TIME": "2032", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-37978"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38046\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19023", 
      "VARIANT_ID": "38046", 
      "TIME": "2036", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38046"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38096\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19048", 
      "VARIANT_ID": "38096", 
      "TIME": "2040", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38096"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38252\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19126", 
      "VARIANT_ID": "38252", 
      "TIME": "2048", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38252"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38350\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19175", 
      "VARIANT_ID": "38350", 
      "TIME": "2053", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38350"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38392\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19196", 
      "VARIANT_ID": "38392", 
      "TIME": "2055", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38392"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38402\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19201", 
      "VARIANT_ID": "38402", 
      "TIME": "2057", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38402"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19224", 
      "VARIANT_ID": "38448", 
      "TIME": "2060", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38664\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19332", 
      "VARIANT_ID": "38664", 
      "TIME": "2072", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38664"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38710\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19355", 
      "VARIANT_ID": "38710", 
      "TIME": "2074", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38710"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38770\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19385", 
      "VARIANT_ID": "38770", 
      "TIME": "2079", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38770"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-38796\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19398", 
      "VARIANT_ID": "38796", 
      "TIME": "2080", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-38796"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39088\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19544", 
      "VARIANT_ID": "39088", 
      "TIME": "2097", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39088"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39102\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19551", 
      "VARIANT_ID": "39102", 
      "TIME": "2098", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39102"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39190\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19595", 
      "VARIANT_ID": "39190", 
      "TIME": "2104", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39190"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39606\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19803", 
      "VARIANT_ID": "39606", 
      "TIME": "2126", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39606"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39630\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19815", 
      "VARIANT_ID": "39630", 
      "TIME": "2129", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39630"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39664\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19832", 
      "VARIANT_ID": "39664", 
      "TIME": "2130", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39664"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39666\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19833", 
      "VARIANT_ID": "39666", 
      "TIME": "2131", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39666"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39914\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19957", 
      "VARIANT_ID": "39914", 
      "TIME": "2146", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39914"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-39952\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "19976", 
      "VARIANT_ID": "39952", 
      "TIME": "2148", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-39952"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-40018\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20009", 
      "VARIANT_ID": "40018", 
      "TIME": "2152", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-40018"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-40448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20224", 
      "VARIANT_ID": "40448", 
      "TIME": "2176", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-40448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-40908\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20454", 
      "VARIANT_ID": "40908", 
      "TIME": "2203", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-40908"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-40928\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20464", 
      "VARIANT_ID": "40928", 
      "TIME": "2204", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-40928"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41112\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20556", 
      "VARIANT_ID": "41112", 
      "TIME": "2214", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41112"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41246\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20623", 
      "VARIANT_ID": "41246", 
      "TIME": "2223", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41246"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41464\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20732", 
      "VARIANT_ID": "41464", 
      "TIME": "2236", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41464"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41478\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20739", 
      "VARIANT_ID": "41478", 
      "TIME": "2237", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41478"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41484\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20742", 
      "VARIANT_ID": "41484", 
      "TIME": "2238", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41484"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-41958\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "20979", 
      "VARIANT_ID": "41958", 
      "TIME": "2266", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-41958"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-42044\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21022", 
      "VARIANT_ID": "42044", 
      "TIME": "2271", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-42044"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-42058\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21029", 
      "VARIANT_ID": "42058", 
      "TIME": "2272", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-42058"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-42696\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21348", 
      "VARIANT_ID": "42696", 
      "TIME": "2311", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-42696"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-42806\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21403", 
      "VARIANT_ID": "42806", 
      "TIME": "2317", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-42806"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43006\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21503", 
      "VARIANT_ID": "43006", 
      "TIME": "2328", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43006"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43212\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21606", 
      "VARIANT_ID": "43212", 
      "TIME": "2342", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43212"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43356\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21678", 
      "VARIANT_ID": "43356", 
      "TIME": "2351", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43356"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43670\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21835", 
      "VARIANT_ID": "43670", 
      "TIME": "2371", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43670"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43792\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21896", 
      "VARIANT_ID": "43792", 
      "TIME": "2378", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43792"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43832\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21916", 
      "VARIANT_ID": "43832", 
      "TIME": "2380", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43832"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43860\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21930", 
      "VARIANT_ID": "43860", 
      "TIME": "2383", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43860"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43874\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21937", 
      "VARIANT_ID": "43874", 
      "TIME": "2383", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43874"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-43992\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "21996", 
      "VARIANT_ID": "43992", 
      "TIME": "2391", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-43992"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-44136\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22068", 
      "VARIANT_ID": "44136", 
      "TIME": "2401", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-44136"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-44180\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22090", 
      "VARIANT_ID": "44180", 
      "TIME": "2404", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-44180"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-44694\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22347", 
      "VARIANT_ID": "44694", 
      "TIME": "2436", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-44694"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-44836\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22418", 
      "VARIANT_ID": "44836", 
      "TIME": "2444", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-44836"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-44960\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22480", 
      "VARIANT_ID": "44960", 
      "TIME": "2452", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-44960"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45070\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22535", 
      "VARIANT_ID": "45070", 
      "TIME": "2459", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45070"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45188\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22594", 
      "VARIANT_ID": "45188", 
      "TIME": "2466", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45188"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45200\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22600", 
      "VARIANT_ID": "45200", 
      "TIME": "2467", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45200"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45278\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22639", 
      "VARIANT_ID": "45278", 
      "TIME": "2471", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45278"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45390\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22695", 
      "VARIANT_ID": "45390", 
      "TIME": "2478", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45390"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45518\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22759", 
      "VARIANT_ID": "45518", 
      "TIME": "2486", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45518"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45566\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22783", 
      "VARIANT_ID": "45566", 
      "TIME": "2491", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45566"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45722\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22861", 
      "VARIANT_ID": "45722", 
      "TIME": "2501", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45722"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45760\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22880", 
      "VARIANT_ID": "45760", 
      "TIME": "2503", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45760"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45802\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22901", 
      "VARIANT_ID": "45802", 
      "TIME": "2507", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45802"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45892\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22946", 
      "VARIANT_ID": "45892", 
      "TIME": "2511", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45892"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-45930\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "22965", 
      "VARIANT_ID": "45930", 
      "TIME": "2514", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-45930"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46180\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23090", 
      "VARIANT_ID": "46180", 
      "TIME": "2529", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46180"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46188\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23094", 
      "VARIANT_ID": "46188", 
      "TIME": "2531", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46188"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23163", 
      "VARIANT_ID": "46326", 
      "TIME": "2539", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46386\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23193", 
      "VARIANT_ID": "46386", 
      "TIME": "2542", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46386"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46460\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23230", 
      "VARIANT_ID": "46460", 
      "TIME": "2547", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46460"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46828\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23414", 
      "VARIANT_ID": "46828", 
      "TIME": "2570", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46828"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46950\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23475", 
      "VARIANT_ID": "46950", 
      "TIME": "2577", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46950"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-46970\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23485", 
      "VARIANT_ID": "46970", 
      "TIME": "2578", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-46970"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47078\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23539", 
      "VARIANT_ID": "47078", 
      "TIME": "2586", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47078"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47106\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23553", 
      "VARIANT_ID": "47106", 
      "TIME": "2587", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47106"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47404\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23702", 
      "VARIANT_ID": "47404", 
      "TIME": "2605", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47404"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47564\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23782", 
      "VARIANT_ID": "47564", 
      "TIME": "2614", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47564"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47654\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23827", 
      "VARIANT_ID": "47654", 
      "TIME": "2620", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47654"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47788\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23894", 
      "VARIANT_ID": "47788", 
      "TIME": "2628", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47788"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-47796\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "23898", 
      "VARIANT_ID": "47796", 
      "TIME": "2629", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-47796"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48056\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24028", 
      "VARIANT_ID": "48056", 
      "TIME": "2645", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48056"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48166\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24083", 
      "VARIANT_ID": "48166", 
      "TIME": "2651", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48166"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48228\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24114", 
      "VARIANT_ID": "48228", 
      "TIME": "2655", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48228"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48386\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24193", 
      "VARIANT_ID": "48386", 
      "TIME": "2665", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48386"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48410\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24205", 
      "VARIANT_ID": "48410", 
      "TIME": "2667", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48410"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48704\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24352", 
      "VARIANT_ID": "48704", 
      "TIME": "2687", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48704"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48730\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24365", 
      "VARIANT_ID": "48730", 
      "TIME": "2689", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48730"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-48932\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24466", 
      "VARIANT_ID": "48932", 
      "TIME": "2701", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-48932"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49076\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24538", 
      "VARIANT_ID": "49076", 
      "TIME": "2709", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49076"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49146\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24573", 
      "VARIANT_ID": "49146", 
      "TIME": "2712", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49146"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49276\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24638", 
      "VARIANT_ID": "49276", 
      "TIME": "2720", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49276"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49364\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24682", 
      "VARIANT_ID": "49364", 
      "TIME": "2726", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49364"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49540\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24770", 
      "VARIANT_ID": "49540", 
      "TIME": "2736", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49540"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-49836\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "24918", 
      "VARIANT_ID": "49836", 
      "TIME": "2754", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-49836"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50028\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25014", 
      "VARIANT_ID": "50028", 
      "TIME": "2766", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50028"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50118\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25059", 
      "VARIANT_ID": "50118", 
      "TIME": "2773", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50118"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50272\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25136", 
      "VARIANT_ID": "50272", 
      "TIME": "2782", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50272"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50406\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25203", 
      "VARIANT_ID": "50406", 
      "TIME": "2790", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50406"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50576\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25288", 
      "VARIANT_ID": "50576", 
      "TIME": "2801", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50576"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50584\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25292", 
      "VARIANT_ID": "50584", 
      "TIME": "2801", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50584"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50632\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25316", 
      "VARIANT_ID": "50632", 
      "TIME": "2804", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50632"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50640\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25320", 
      "VARIANT_ID": "50640", 
      "TIME": "2805", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50640"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50654\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25327", 
      "VARIANT_ID": "50654", 
      "TIME": "2806", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50654"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50692\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25346", 
      "VARIANT_ID": "50692", 
      "TIME": "2809", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50692"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50714\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25357", 
      "VARIANT_ID": "50714", 
      "TIME": "2810", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50714"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50744\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25372", 
      "VARIANT_ID": "50744", 
      "TIME": "2812", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50744"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50750\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25375", 
      "VARIANT_ID": "50750", 
      "TIME": "2812", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50750"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50854\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25427", 
      "VARIANT_ID": "50854", 
      "TIME": "2818", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50854"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25434", 
      "VARIANT_ID": "50868", 
      "TIME": "2820", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50966\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25483", 
      "VARIANT_ID": "50966", 
      "TIME": "2825", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50966"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-50972\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25486", 
      "VARIANT_ID": "50972", 
      "TIME": "2825", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-50972"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51012\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25506", 
      "VARIANT_ID": "51012", 
      "TIME": "2828", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51012"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51120\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25560", 
      "VARIANT_ID": "51120", 
      "TIME": "2834", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51120"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25672", 
      "VARIANT_ID": "51344", 
      "TIME": "2846", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51362\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25681", 
      "VARIANT_ID": "51362", 
      "TIME": "2847", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51362"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51420\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25710", 
      "VARIANT_ID": "51420", 
      "TIME": "2851", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51420"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51494\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25747", 
      "VARIANT_ID": "51494", 
      "TIME": "2856", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51494"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51610\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25805", 
      "VARIANT_ID": "51610", 
      "TIME": "2862", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51610"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51664\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25832", 
      "VARIANT_ID": "51664", 
      "TIME": "2866", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51664"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51724\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25862", 
      "VARIANT_ID": "51724", 
      "TIME": "2869", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51724"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51832\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25916", 
      "VARIANT_ID": "51832", 
      "TIME": "2875", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51832"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25934", 
      "VARIANT_ID": "51868", 
      "TIME": "2878", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-51966\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "25983", 
      "VARIANT_ID": "51966", 
      "TIME": "2884", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-51966"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52062\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26031", 
      "VARIANT_ID": "52062", 
      "TIME": "2890", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52062"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52150\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26075", 
      "VARIANT_ID": "52150", 
      "TIME": "2895", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52150"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52172\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26086", 
      "VARIANT_ID": "52172", 
      "TIME": "2897", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52172"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52268\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26134", 
      "VARIANT_ID": "52268", 
      "TIME": "2903", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52268"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52290\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26145", 
      "VARIANT_ID": "52290", 
      "TIME": "2905", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52290"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52316\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26158", 
      "VARIANT_ID": "52316", 
      "TIME": "2906", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52316"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52678\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26339", 
      "VARIANT_ID": "52678", 
      "TIME": "2927", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52678"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52726\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26363", 
      "VARIANT_ID": "52726", 
      "TIME": "2930", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52726"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52800\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26400", 
      "VARIANT_ID": "52800", 
      "TIME": "2935", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52800"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52942\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26471", 
      "VARIANT_ID": "52942", 
      "TIME": "2943", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52942"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52962\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26481", 
      "VARIANT_ID": "52962", 
      "TIME": "2944", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52962"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52994\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26497", 
      "VARIANT_ID": "52994", 
      "TIME": "2946", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52994"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53000\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26500", 
      "VARIANT_ID": "53000", 
      "TIME": "2947", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53000"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53430\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26715", 
      "VARIANT_ID": "53430", 
      "TIME": "2971", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53430"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53476\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26738", 
      "VARIANT_ID": "53476", 
      "TIME": "2974", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53476"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53642\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26821", 
      "VARIANT_ID": "53642", 
      "TIME": "2984", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53642"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53744\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26872", 
      "VARIANT_ID": "53744", 
      "TIME": "2991", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53744"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53824\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26912", 
      "VARIANT_ID": "53824", 
      "TIME": "2996", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53824"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53826\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26913", 
      "VARIANT_ID": "53826", 
      "TIME": "2996", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53826"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53848\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26924", 
      "VARIANT_ID": "53848", 
      "TIME": "2999", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53848"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-53988\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "26994", 
      "VARIANT_ID": "53988", 
      "TIME": "3006", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-53988"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54234\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27117", 
      "VARIANT_ID": "54234", 
      "TIME": "3021", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54234"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54552\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27276", 
      "VARIANT_ID": "54552", 
      "TIME": "3038", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54552"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54564\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27282", 
      "VARIANT_ID": "54564", 
      "TIME": "3039", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54564"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54580\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27290", 
      "VARIANT_ID": "54580", 
      "TIME": "3040", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54580"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54618\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27309", 
      "VARIANT_ID": "54618", 
      "TIME": "3042", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54618"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54814\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27407", 
      "VARIANT_ID": "54814", 
      "TIME": "3054", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54814"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-54912\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27456", 
      "VARIANT_ID": "54912", 
      "TIME": "3060", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-54912"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-55236\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27618", 
      "VARIANT_ID": "55236", 
      "TIME": "3078", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-55236"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-55364\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27682", 
      "VARIANT_ID": "55364", 
      "TIME": "3084", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-55364"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-55492\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27746", 
      "VARIANT_ID": "55492", 
      "TIME": "3091", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-55492"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-55558\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27779", 
      "VARIANT_ID": "55558", 
      "TIME": "3094", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-55558"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-55820\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "27910", 
      "VARIANT_ID": "55820", 
      "TIME": "3108", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-55820"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-56160\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28080", 
      "VARIANT_ID": "56160", 
      "TIME": "3127", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-56160"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-56318\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28159", 
      "VARIANT_ID": "56318", 
      "TIME": "3136", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-56318"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-56610\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28305", 
      "VARIANT_ID": "56610", 
      "TIME": "3151", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-56610"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-56754\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28377", 
      "VARIANT_ID": "56754", 
      "TIME": "3161", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-56754"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57024\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28512", 
      "VARIANT_ID": "57024", 
      "TIME": "3178", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57024"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57192\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28596", 
      "VARIANT_ID": "57192", 
      "TIME": "3187", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57192"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57254\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28627", 
      "VARIANT_ID": "57254", 
      "TIME": "3191", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57254"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57324\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28662", 
      "VARIANT_ID": "57324", 
      "TIME": "3196", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57324"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57360\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28680", 
      "VARIANT_ID": "57360", 
      "TIME": "3198", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57360"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57714\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28857", 
      "VARIANT_ID": "57714", 
      "TIME": "3218", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57714"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57776\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28888", 
      "VARIANT_ID": "57776", 
      "TIME": "3221", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57776"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-57778\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "28889", 
      "VARIANT_ID": "57778", 
      "TIME": "3222", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-57778"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58100\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29050", 
      "VARIANT_ID": "58100", 
      "TIME": "3240", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58100"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58156\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29078", 
      "VARIANT_ID": "58156", 
      "TIME": "3244", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58156"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58258\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29129", 
      "VARIANT_ID": "58258", 
      "TIME": "3250", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58258"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58400\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29200", 
      "VARIANT_ID": "58400", 
      "TIME": "3258", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58400"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58474\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29237", 
      "VARIANT_ID": "58474", 
      "TIME": "3261", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58474"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58478\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29239", 
      "VARIANT_ID": "58478", 
      "TIME": "3261", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58478"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58596\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29298", 
      "VARIANT_ID": "58596", 
      "TIME": "3269", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58596"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58678\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29339", 
      "VARIANT_ID": "58678", 
      "TIME": "3274", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58678"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58826\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29413", 
      "VARIANT_ID": "58826", 
      "TIME": "3283", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58826"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-58940\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29470", 
      "VARIANT_ID": "58940", 
      "TIME": "3290", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-58940"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59104\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29552", 
      "VARIANT_ID": "59104", 
      "TIME": "3299", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59104"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59168\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29584", 
      "VARIANT_ID": "59168", 
      "TIME": "3304", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59168"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59280\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29640", 
      "VARIANT_ID": "59280", 
      "TIME": "3310", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59280"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59318\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29659", 
      "VARIANT_ID": "59318", 
      "TIME": "3311", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59318"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59376\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29688", 
      "VARIANT_ID": "59376", 
      "TIME": "3315", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59376"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-59382\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "29691", 
      "VARIANT_ID": "59382", 
      "TIME": "3315", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-59382"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-60230\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30115", 
      "VARIANT_ID": "60230", 
      "TIME": "3368", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-60230"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-60348\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30174", 
      "VARIANT_ID": "60348", 
      "TIME": "3374", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-60348"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-60502\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30251", 
      "VARIANT_ID": "60502", 
      "TIME": "3383", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-60502"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-61004\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30502", 
      "VARIANT_ID": "61004", 
      "TIME": "3414", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-61004"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-61254\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30627", 
      "VARIANT_ID": "61254", 
      "TIME": "3429", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-61254"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-61406\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30703", 
      "VARIANT_ID": "61406", 
      "TIME": "3438", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-61406"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-61708\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30854", 
      "VARIANT_ID": "61708", 
      "TIME": "3456", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-61708"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-61802\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "30901", 
      "VARIANT_ID": "61802", 
      "TIME": "3462", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-61802"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62316\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31158", 
      "VARIANT_ID": "62316", 
      "TIME": "3496", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62316"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62476\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31238", 
      "VARIANT_ID": "62476", 
      "TIME": "3506", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62476"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62700\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31350", 
      "VARIANT_ID": "62700", 
      "TIME": "3520", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62700"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62724\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31362", 
      "VARIANT_ID": "62724", 
      "TIME": "3523", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62724"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62830\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31415", 
      "VARIANT_ID": "62830", 
      "TIME": "3529", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62830"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-62850\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31425", 
      "VARIANT_ID": "62850", 
      "TIME": "3531", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-62850"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63266\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31633", 
      "VARIANT_ID": "63266", 
      "TIME": "3553", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63266"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63522\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31761", 
      "VARIANT_ID": "63522", 
      "TIME": "3568", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63522"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63538\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31769", 
      "VARIANT_ID": "63538", 
      "TIME": "3569", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63538"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63720\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31860", 
      "VARIANT_ID": "63720", 
      "TIME": "3579", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63720"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63770\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31885", 
      "VARIANT_ID": "63770", 
      "TIME": "3583", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63770"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63850\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31925", 
      "VARIANT_ID": "63850", 
      "TIME": "3588", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63850"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-63952\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "31976", 
      "VARIANT_ID": "63952", 
      "TIME": "3595", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-63952"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-64344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32172", 
      "VARIANT_ID": "64344", 
      "TIME": "3620", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-64344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-64766\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32383", 
      "VARIANT_ID": "64766", 
      "TIME": "3646", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-64766"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65136\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32568", 
      "VARIANT_ID": "65136", 
      "TIME": "3672", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65136"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65326\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32663", 
      "VARIANT_ID": "65326", 
      "TIME": "3683", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65326"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65404\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32702", 
      "VARIANT_ID": "65404", 
      "TIME": "3688", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65404"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65568\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32784", 
      "VARIANT_ID": "65568", 
      "TIME": "3700", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65568"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65612\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32806", 
      "VARIANT_ID": "65612", 
      "TIME": "3704", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65612"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65692\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32846", 
      "VARIANT_ID": "65692", 
      "TIME": "3709", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65692"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65874\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32937", 
      "VARIANT_ID": "65874", 
      "TIME": "3721", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65874"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65884\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32942", 
      "VARIANT_ID": "65884", 
      "TIME": "3721", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65884"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-65888\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "32944", 
      "VARIANT_ID": "65888", 
      "TIME": "3721", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-65888"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66032\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33016", 
      "VARIANT_ID": "66032", 
      "TIME": "3731", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66032"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66054\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33027", 
      "VARIANT_ID": "66054", 
      "TIME": "3732", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66054"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66424\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33212", 
      "VARIANT_ID": "66424", 
      "TIME": "3755", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66424"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66434\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33217", 
      "VARIANT_ID": "66434", 
      "TIME": "3755", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66434"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66536\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33268", 
      "VARIANT_ID": "66536", 
      "TIME": "3760", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66536"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-66744\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33372", 
      "VARIANT_ID": "66744", 
      "TIME": "3775", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-66744"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-67444\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33722", 
      "VARIANT_ID": "67444", 
      "TIME": "3820", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-67444"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-67582\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33791", 
      "VARIANT_ID": "67582", 
      "TIME": "3829", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-67582"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-67808\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33904", 
      "VARIANT_ID": "67808", 
      "TIME": "3846", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-67808"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-67982\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "33991", 
      "VARIANT_ID": "67982", 
      "TIME": "3857", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-67982"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68004\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34002", 
      "VARIANT_ID": "68004", 
      "TIME": "3858", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68004"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68074\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34037", 
      "VARIANT_ID": "68074", 
      "TIME": "3862", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68074"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68212\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34106", 
      "VARIANT_ID": "68212", 
      "TIME": "3871", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68212"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68308\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34154", 
      "VARIANT_ID": "68308", 
      "TIME": "3877", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68308"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68424\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34212", 
      "VARIANT_ID": "68424", 
      "TIME": "3884", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68424"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68564\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34282", 
      "VARIANT_ID": "68564", 
      "TIME": "3893", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68564"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68576\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34288", 
      "VARIANT_ID": "68576", 
      "TIME": "3894", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68576"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68578\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34289", 
      "VARIANT_ID": "68578", 
      "TIME": "3894", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68578"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68616\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34308", 
      "VARIANT_ID": "68616", 
      "TIME": "3897", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68616"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68716\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34358", 
      "VARIANT_ID": "68716", 
      "TIME": "3903", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68716"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68888\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34444", 
      "VARIANT_ID": "68888", 
      "TIME": "3914", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68888"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-68984\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34492", 
      "VARIANT_ID": "68984", 
      "TIME": "3920", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-68984"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69052\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34526", 
      "VARIANT_ID": "69052", 
      "TIME": "3925", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69052"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69222\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34611", 
      "VARIANT_ID": "69222", 
      "TIME": "3934", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69222"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69276\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34638", 
      "VARIANT_ID": "69276", 
      "TIME": "3938", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69276"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69364\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34682", 
      "VARIANT_ID": "69364", 
      "TIME": "3945", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69364"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69394\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34697", 
      "VARIANT_ID": "69394", 
      "TIME": "3947", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69394"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-69528\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "34764", 
      "VARIANT_ID": "69528", 
      "TIME": "3956", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-69528"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70070\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35035", 
      "VARIANT_ID": "70070", 
      "TIME": "3990", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70070"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70154\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35077", 
      "VARIANT_ID": "70154", 
      "TIME": "3995", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70154"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70398\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35199", 
      "VARIANT_ID": "70398", 
      "TIME": "4011", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70398"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70688\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35344", 
      "VARIANT_ID": "70688", 
      "TIME": "4028", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70688"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70728\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35364", 
      "VARIANT_ID": "70728", 
      "TIME": "4030", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70728"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-70856\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35428", 
      "VARIANT_ID": "70856", 
      "TIME": "4038", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-70856"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71132\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35566", 
      "VARIANT_ID": "71132", 
      "TIME": "4055", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71132"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71144\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35572", 
      "VARIANT_ID": "71144", 
      "TIME": "4057", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71144"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71186\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35593", 
      "VARIANT_ID": "71186", 
      "TIME": "4059", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71186"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35672", 
      "VARIANT_ID": "71344", 
      "TIME": "4069", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71398\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35699", 
      "VARIANT_ID": "71398", 
      "TIME": "4073", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71398"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71454\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35727", 
      "VARIANT_ID": "71454", 
      "TIME": "4075", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71454"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71672\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35836", 
      "VARIANT_ID": "71672", 
      "TIME": "4089", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71672"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71970\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35985", 
      "VARIANT_ID": "71970", 
      "TIME": "4107", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71970"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-71972\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "35986", 
      "VARIANT_ID": "71972", 
      "TIME": "4108", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-71972"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-72530\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36265", 
      "VARIANT_ID": "72530", 
      "TIME": "4140", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-72530"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-72542\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36271", 
      "VARIANT_ID": "72542", 
      "TIME": "4142", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-72542"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-72866\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36433", 
      "VARIANT_ID": "72866", 
      "TIME": "4160", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-72866"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-72904\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36452", 
      "VARIANT_ID": "72904", 
      "TIME": "4163", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-72904"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-72924\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36462", 
      "VARIANT_ID": "72924", 
      "TIME": "4164", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-72924"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73138\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36569", 
      "VARIANT_ID": "73138", 
      "TIME": "4178", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73138"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73166\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36583", 
      "VARIANT_ID": "73166", 
      "TIME": "4179", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73166"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73176\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36588", 
      "VARIANT_ID": "73176", 
      "TIME": "4180", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73176"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73196\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36598", 
      "VARIANT_ID": "73196", 
      "TIME": "4181", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73196"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73200\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36600", 
      "VARIANT_ID": "73200", 
      "TIME": "4181", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73200"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73370\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36685", 
      "VARIANT_ID": "73370", 
      "TIME": "4191", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73370"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73522\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36761", 
      "VARIANT_ID": "73522", 
      "TIME": "4200", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73522"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73546\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36773", 
      "VARIANT_ID": "73546", 
      "TIME": "4202", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73546"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73652\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36826", 
      "VARIANT_ID": "73652", 
      "TIME": "4208", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73652"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73674\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36837", 
      "VARIANT_ID": "73674", 
      "TIME": "4209", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73674"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73932\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36966", 
      "VARIANT_ID": "73932", 
      "TIME": "4224", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73932"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-73936\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "36968", 
      "VARIANT_ID": "73936", 
      "TIME": "4225", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-73936"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74296\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37148", 
      "VARIANT_ID": "74296", 
      "TIME": "4246", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74296"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74612\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37306", 
      "VARIANT_ID": "74612", 
      "TIME": "4264", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74612"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74886\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37443", 
      "VARIANT_ID": "74886", 
      "TIME": "4280", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74886"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74890\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37445", 
      "VARIANT_ID": "74890", 
      "TIME": "4280", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74890"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74896\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37448", 
      "VARIANT_ID": "74896", 
      "TIME": "4281", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74896"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-74916\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37458", 
      "VARIANT_ID": "74916", 
      "TIME": "4283", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-74916"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75062\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37531", 
      "VARIANT_ID": "75062", 
      "TIME": "4292", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75062"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75124\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37562", 
      "VARIANT_ID": "75124", 
      "TIME": "4296", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75124"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75506\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37753", 
      "VARIANT_ID": "75506", 
      "TIME": "4317", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75506"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75594\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37797", 
      "VARIANT_ID": "75594", 
      "TIME": "4322", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75594"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75724\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37862", 
      "VARIANT_ID": "75724", 
      "TIME": "4330", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75724"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75770\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37885", 
      "VARIANT_ID": "75770", 
      "TIME": "4333", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75770"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75786\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37893", 
      "VARIANT_ID": "75786", 
      "TIME": "4334", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75786"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75936\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37968", 
      "VARIANT_ID": "75936", 
      "TIME": "4344", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75936"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-75980\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "37990", 
      "VARIANT_ID": "75980", 
      "TIME": "4346", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-75980"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76004\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38002", 
      "VARIANT_ID": "76004", 
      "TIME": "4348", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76004"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38172", 
      "VARIANT_ID": "76344", 
      "TIME": "4369", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76362\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38181", 
      "VARIANT_ID": "76362", 
      "TIME": "4370", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76362"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76492\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38246", 
      "VARIANT_ID": "76492", 
      "TIME": "4378", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76492"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76706\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38353", 
      "VARIANT_ID": "76706", 
      "TIME": "4392", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76706"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76780\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38390", 
      "VARIANT_ID": "76780", 
      "TIME": "4397", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76780"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38434", 
      "VARIANT_ID": "76868", 
      "TIME": "4402", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-76890\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38445", 
      "VARIANT_ID": "76890", 
      "TIME": "4402", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-76890"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77052\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38526", 
      "VARIANT_ID": "77052", 
      "TIME": "4412", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77052"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77066\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38533", 
      "VARIANT_ID": "77066", 
      "TIME": "4412", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77066"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77142\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38571", 
      "VARIANT_ID": "77142", 
      "TIME": "4417", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77142"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77150\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38575", 
      "VARIANT_ID": "77150", 
      "TIME": "4419", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77150"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77220\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38610", 
      "VARIANT_ID": "77220", 
      "TIME": "4423", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77220"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77270\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38635", 
      "VARIANT_ID": "77270", 
      "TIME": "4426", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77270"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77586\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38793", 
      "VARIANT_ID": "77586", 
      "TIME": "4445", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77586"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77692\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38846", 
      "VARIANT_ID": "77692", 
      "TIME": "4453", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77692"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77738\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38869", 
      "VARIANT_ID": "77738", 
      "TIME": "4456", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77738"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-77844\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "38922", 
      "VARIANT_ID": "77844", 
      "TIME": "4461", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-77844"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78152\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39076", 
      "VARIANT_ID": "78152", 
      "TIME": "4481", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78152"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78184\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39092", 
      "VARIANT_ID": "78184", 
      "TIME": "4482", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78184"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78404\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39202", 
      "VARIANT_ID": "78404", 
      "TIME": "4496", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78404"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78414\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39207", 
      "VARIANT_ID": "78414", 
      "TIME": "4496", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78414"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39224", 
      "VARIANT_ID": "78448", 
      "TIME": "4499", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78488\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39244", 
      "VARIANT_ID": "78488", 
      "TIME": "4501", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78488"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78504\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39252", 
      "VARIANT_ID": "78504", 
      "TIME": "4502", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78504"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78808\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39404", 
      "VARIANT_ID": "78808", 
      "TIME": "4520", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78808"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78916\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39458", 
      "VARIANT_ID": "78916", 
      "TIME": "4526", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78916"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-78990\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39495", 
      "VARIANT_ID": "78990", 
      "TIME": "4530", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-78990"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79072\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39536", 
      "VARIANT_ID": "79072", 
      "TIME": "4535", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79072"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79202\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39601", 
      "VARIANT_ID": "79202", 
      "TIME": "4543", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79202"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79268\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39634", 
      "VARIANT_ID": "79268", 
      "TIME": "4547", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79268"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79414\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39707", 
      "VARIANT_ID": "79414", 
      "TIME": "4557", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79414"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79734\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39867", 
      "VARIANT_ID": "79734", 
      "TIME": "4575", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79734"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79944\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39972", 
      "VARIANT_ID": "79944", 
      "TIME": "4588", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79944"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-79966\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "39983", 
      "VARIANT_ID": "79966", 
      "TIME": "4589", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-79966"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80110\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40055", 
      "VARIANT_ID": "80110", 
      "TIME": "4598", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80110"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80252\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40126", 
      "VARIANT_ID": "80252", 
      "TIME": "4608", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80252"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80292\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40146", 
      "VARIANT_ID": "80292", 
      "TIME": "4610", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80292"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40172", 
      "VARIANT_ID": "80344", 
      "TIME": "4613", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80364\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40182", 
      "VARIANT_ID": "80364", 
      "TIME": "4614", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80364"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40224", 
      "VARIANT_ID": "80448", 
      "TIME": "4620", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80490\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40245", 
      "VARIANT_ID": "80490", 
      "TIME": "4622", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80490"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80910\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40455", 
      "VARIANT_ID": "80910", 
      "TIME": "4648", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80910"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-80982\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40491", 
      "VARIANT_ID": "80982", 
      "TIME": "4651", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-80982"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81088\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40544", 
      "VARIANT_ID": "81088", 
      "TIME": "4657", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81088"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81102\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40551", 
      "VARIANT_ID": "81102", 
      "TIME": "4659", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81102"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81106\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40553", 
      "VARIANT_ID": "81106", 
      "TIME": "4659", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81106"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81112\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40556", 
      "VARIANT_ID": "81112", 
      "TIME": "4660", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81112"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81222\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40611", 
      "VARIANT_ID": "81222", 
      "TIME": "4667", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81222"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81250\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40625", 
      "VARIANT_ID": "81250", 
      "TIME": "4668", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81250"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81312\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40656", 
      "VARIANT_ID": "81312", 
      "TIME": "4672", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81312"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81358\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40679", 
      "VARIANT_ID": "81358", 
      "TIME": "4675", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81358"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81702\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40851", 
      "VARIANT_ID": "81702", 
      "TIME": "4694", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81702"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81788\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40894", 
      "VARIANT_ID": "81788", 
      "TIME": "4700", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81788"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81934\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40967", 
      "VARIANT_ID": "81934", 
      "TIME": "4710", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81934"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81958\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40979", 
      "VARIANT_ID": "81958", 
      "TIME": "4711", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81958"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-81980\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "40990", 
      "VARIANT_ID": "81980", 
      "TIME": "4713", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-81980"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82218\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41109", 
      "VARIANT_ID": "82218", 
      "TIME": "4727", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82218"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82534\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41267", 
      "VARIANT_ID": "82534", 
      "TIME": "4746", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82534"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82712\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41356", 
      "VARIANT_ID": "82712", 
      "TIME": "4757", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82712"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82816\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41408", 
      "VARIANT_ID": "82816", 
      "TIME": "4765", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82816"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82838\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41419", 
      "VARIANT_ID": "82838", 
      "TIME": "4766", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82838"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82864\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41432", 
      "VARIANT_ID": "82864", 
      "TIME": "4768", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82864"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-82976\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41488", 
      "VARIANT_ID": "82976", 
      "TIME": "4773", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-82976"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83302\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41651", 
      "VARIANT_ID": "83302", 
      "TIME": "4794", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83302"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83520\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41760", 
      "VARIANT_ID": "83520", 
      "TIME": "4808", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83520"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83678\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41839", 
      "VARIANT_ID": "83678", 
      "TIME": "4817", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83678"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83742\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41871", 
      "VARIANT_ID": "83742", 
      "TIME": "4821", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83742"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83758\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41879", 
      "VARIANT_ID": "83758", 
      "TIME": "4822", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83758"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-83824\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "41912", 
      "VARIANT_ID": "83824", 
      "TIME": "4827", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-83824"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84008\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42004", 
      "VARIANT_ID": "84008", 
      "TIME": "4838", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84008"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84154\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42077", 
      "VARIANT_ID": "84154", 
      "TIME": "4847", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84154"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84228\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42114", 
      "VARIANT_ID": "84228", 
      "TIME": "4851", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84228"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84390\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42195", 
      "VARIANT_ID": "84390", 
      "TIME": "4861", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84390"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84562\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42281", 
      "VARIANT_ID": "84562", 
      "TIME": "4873", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84562"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84590\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42295", 
      "VARIANT_ID": "84590", 
      "TIME": "4874", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84590"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84648\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42324", 
      "VARIANT_ID": "84648", 
      "TIME": "4877", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84648"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-84922\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42461", 
      "VARIANT_ID": "84922", 
      "TIME": "4893", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-84922"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85176\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42588", 
      "VARIANT_ID": "85176", 
      "TIME": "4908", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85176"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85238\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42619", 
      "VARIANT_ID": "85238", 
      "TIME": "4911", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85238"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85268\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42634", 
      "VARIANT_ID": "85268", 
      "TIME": "4914", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85268"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85338\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42669", 
      "VARIANT_ID": "85338", 
      "TIME": "4918", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85338"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85616\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42808", 
      "VARIANT_ID": "85616", 
      "TIME": "4936", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85616"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85798\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42899", 
      "VARIANT_ID": "85798", 
      "TIME": "4945", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85798"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85878\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42939", 
      "VARIANT_ID": "85878", 
      "TIME": "4951", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85878"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-85958\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "42979", 
      "VARIANT_ID": "85958", 
      "TIME": "4955", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-85958"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86106\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43053", 
      "VARIANT_ID": "86106", 
      "TIME": "4965", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86106"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86136\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43068", 
      "VARIANT_ID": "86136", 
      "TIME": "4967", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86136"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86212\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43106", 
      "VARIANT_ID": "86212", 
      "TIME": "4972", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86212"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86266\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43133", 
      "VARIANT_ID": "86266", 
      "TIME": "4975", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86266"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86282\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43141", 
      "VARIANT_ID": "86282", 
      "TIME": "4976", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86282"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86470\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43235", 
      "VARIANT_ID": "86470", 
      "TIME": "4990", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86470"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86822\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43411", 
      "VARIANT_ID": "86822", 
      "TIME": "5011", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86822"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-86994\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43497", 
      "VARIANT_ID": "86994", 
      "TIME": "5022", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-86994"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87112\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43556", 
      "VARIANT_ID": "87112", 
      "TIME": "5029", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87112"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87338\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43669", 
      "VARIANT_ID": "87338", 
      "TIME": "5044", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87338"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87432\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43716", 
      "VARIANT_ID": "87432", 
      "TIME": "5050", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87432"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87450\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43725", 
      "VARIANT_ID": "87450", 
      "TIME": "5051", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87450"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87626\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43813", 
      "VARIANT_ID": "87626", 
      "TIME": "5063", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87626"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87688\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43844", 
      "VARIANT_ID": "87688", 
      "TIME": "5067", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87688"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-87964\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "43982", 
      "VARIANT_ID": "87964", 
      "TIME": "5084", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-87964"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88136\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44068", 
      "VARIANT_ID": "88136", 
      "TIME": "5096", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88136"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88244\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44122", 
      "VARIANT_ID": "88244", 
      "TIME": "5102", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88244"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88246\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44123", 
      "VARIANT_ID": "88246", 
      "TIME": "5102", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88246"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88364\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44182", 
      "VARIANT_ID": "88364", 
      "TIME": "5110", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88364"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88388\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44194", 
      "VARIANT_ID": "88388", 
      "TIME": "5111", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88388"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88540\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44270", 
      "VARIANT_ID": "88540", 
      "TIME": "5120", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88540"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-88694\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44347", 
      "VARIANT_ID": "88694", 
      "TIME": "5130", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-88694"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-89060\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44530", 
      "VARIANT_ID": "89060", 
      "TIME": "5150", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-89060"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-89370\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44685", 
      "VARIANT_ID": "89370", 
      "TIME": "5172", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-89370"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-89740\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44870", 
      "VARIANT_ID": "89740", 
      "TIME": "5194", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-89740"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-89914\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "44957", 
      "VARIANT_ID": "89914", 
      "TIME": "5204", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-89914"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90142\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45071", 
      "VARIANT_ID": "90142", 
      "TIME": "5217", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90142"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90236\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45118", 
      "VARIANT_ID": "90236", 
      "TIME": "5223", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90236"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90304\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45152", 
      "VARIANT_ID": "90304", 
      "TIME": "5227", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90304"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90322\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45161", 
      "VARIANT_ID": "90322", 
      "TIME": "5228", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90322"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90330\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45165", 
      "VARIANT_ID": "90330", 
      "TIME": "5229", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90330"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90514\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45257", 
      "VARIANT_ID": "90514", 
      "TIME": "5241", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90514"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90536\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45268", 
      "VARIANT_ID": "90536", 
      "TIME": "5242", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90536"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90576\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45288", 
      "VARIANT_ID": "90576", 
      "TIME": "5245", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90576"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90658\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45329", 
      "VARIANT_ID": "90658", 
      "TIME": "5249", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90658"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90848\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45424", 
      "VARIANT_ID": "90848", 
      "TIME": "5262", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90848"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-90868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45434", 
      "VARIANT_ID": "90868", 
      "TIME": "5263", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-90868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91194\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45597", 
      "VARIANT_ID": "91194", 
      "TIME": "5281", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91194"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91292\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45646", 
      "VARIANT_ID": "91292", 
      "TIME": "5288", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91292"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91718\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45859", 
      "VARIANT_ID": "91718", 
      "TIME": "5315", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91718"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91740\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45870", 
      "VARIANT_ID": "91740", 
      "TIME": "5317", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91740"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91746\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45873", 
      "VARIANT_ID": "91746", 
      "TIME": "5317", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91746"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91954\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45977", 
      "VARIANT_ID": "91954", 
      "TIME": "5328", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91954"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91960\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45980", 
      "VARIANT_ID": "91960", 
      "TIME": "5329", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91960"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-91982\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "45991", 
      "VARIANT_ID": "91982", 
      "TIME": "5331", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-91982"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92028\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46014", 
      "VARIANT_ID": "92028", 
      "TIME": "5334", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92028"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92152\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46076", 
      "VARIANT_ID": "92152", 
      "TIME": "5344", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92152"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92316\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46158", 
      "VARIANT_ID": "92316", 
      "TIME": "5353", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92316"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92396\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46198", 
      "VARIANT_ID": "92396", 
      "TIME": "5358", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92396"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92416\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46208", 
      "VARIANT_ID": "92416", 
      "TIME": "5358", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92416"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92466\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46233", 
      "VARIANT_ID": "92466", 
      "TIME": "5362", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92466"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92476\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46238", 
      "VARIANT_ID": "92476", 
      "TIME": "5363", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92476"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92572\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46286", 
      "VARIANT_ID": "92572", 
      "TIME": "5370", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92572"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92768\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46384", 
      "VARIANT_ID": "92768", 
      "TIME": "5381", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92768"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-92964\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46482", 
      "VARIANT_ID": "92964", 
      "TIME": "5395", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-92964"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93032\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46516", 
      "VARIANT_ID": "93032", 
      "TIME": "5400", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93032"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93050\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46525", 
      "VARIANT_ID": "93050", 
      "TIME": "5400", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93050"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93314\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46657", 
      "VARIANT_ID": "93314", 
      "TIME": "5416", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93314"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93408\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46704", 
      "VARIANT_ID": "93408", 
      "TIME": "5423", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93408"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93722\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46861", 
      "VARIANT_ID": "93722", 
      "TIME": "5442", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93722"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93818\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46909", 
      "VARIANT_ID": "93818", 
      "TIME": "5448", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93818"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-93904\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "46952", 
      "VARIANT_ID": "93904", 
      "TIME": "5453", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-93904"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-94162\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47081", 
      "VARIANT_ID": "94162", 
      "TIME": "5469", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-94162"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-94282\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47141", 
      "VARIANT_ID": "94282", 
      "TIME": "5476", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-94282"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-94496\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47248", 
      "VARIANT_ID": "94496", 
      "TIME": "5489", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-94496"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-94520\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47260", 
      "VARIANT_ID": "94520", 
      "TIME": "5491", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-94520"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-94932\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47466", 
      "VARIANT_ID": "94932", 
      "TIME": "5516", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-94932"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95012\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47506", 
      "VARIANT_ID": "95012", 
      "TIME": "5521", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95012"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95040\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47520", 
      "VARIANT_ID": "95040", 
      "TIME": "5523", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95040"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95128\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47564", 
      "VARIANT_ID": "95128", 
      "TIME": "5529", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95128"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95166\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47583", 
      "VARIANT_ID": "95166", 
      "TIME": "5532", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95166"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95306\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47653", 
      "VARIANT_ID": "95306", 
      "TIME": "5540", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95306"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95336\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47668", 
      "VARIANT_ID": "95336", 
      "TIME": "5543", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95336"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95356\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47678", 
      "VARIANT_ID": "95356", 
      "TIME": "5544", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95356"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95366\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47683", 
      "VARIANT_ID": "95366", 
      "TIME": "5544", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95366"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95388\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47694", 
      "VARIANT_ID": "95388", 
      "TIME": "5545", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95388"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95676\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47838", 
      "VARIANT_ID": "95676", 
      "TIME": "5563", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95676"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95702\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47851", 
      "VARIANT_ID": "95702", 
      "TIME": "5565", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95702"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95880\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47940", 
      "VARIANT_ID": "95880", 
      "TIME": "5575", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95880"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95970\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47985", 
      "VARIANT_ID": "95970", 
      "TIME": "5581", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95970"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-95994\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "47997", 
      "VARIANT_ID": "95994", 
      "TIME": "5583", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-95994"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96022\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48011", 
      "VARIANT_ID": "96022", 
      "TIME": "5584", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96022"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96152\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48076", 
      "VARIANT_ID": "96152", 
      "TIME": "5592", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96152"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96272\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48136", 
      "VARIANT_ID": "96272", 
      "TIME": "5600", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96272"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96294\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48147", 
      "VARIANT_ID": "96294", 
      "TIME": "5602", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96294"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96388\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48194", 
      "VARIANT_ID": "96388", 
      "TIME": "5607", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96388"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96642\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48321", 
      "VARIANT_ID": "96642", 
      "TIME": "5624", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96642"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-96726\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48363", 
      "VARIANT_ID": "96726", 
      "TIME": "5632", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-96726"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97226\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48613", 
      "VARIANT_ID": "97226", 
      "TIME": "5661", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97226"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97298\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48649", 
      "VARIANT_ID": "97298", 
      "TIME": "5665", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97298"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97300\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48650", 
      "VARIANT_ID": "97300", 
      "TIME": "5666", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97300"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97414\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48707", 
      "VARIANT_ID": "97414", 
      "TIME": "5674", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97414"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97442\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48721", 
      "VARIANT_ID": "97442", 
      "TIME": "5677", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97442"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97452\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48726", 
      "VARIANT_ID": "97452", 
      "TIME": "5678", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97452"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97494\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48747", 
      "VARIANT_ID": "97494", 
      "TIME": "5681", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97494"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97802\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48901", 
      "VARIANT_ID": "97802", 
      "TIME": "5699", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97802"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-97888\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "48944", 
      "VARIANT_ID": "97888", 
      "TIME": "5705", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-97888"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98086\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49043", 
      "VARIANT_ID": "98086", 
      "TIME": "5716", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98086"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98102\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49051", 
      "VARIANT_ID": "98102", 
      "TIME": "5718", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98102"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98262\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49131", 
      "VARIANT_ID": "98262", 
      "TIME": "5728", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98262"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98310\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49155", 
      "VARIANT_ID": "98310", 
      "TIME": "5732", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98310"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98414\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49207", 
      "VARIANT_ID": "98414", 
      "TIME": "5738", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98414"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98432\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49216", 
      "VARIANT_ID": "98432", 
      "TIME": "5739", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98432"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98448\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49224", 
      "VARIANT_ID": "98448", 
      "TIME": "5741", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98448"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98626\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49313", 
      "VARIANT_ID": "98626", 
      "TIME": "5752", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98626"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-98632\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49316", 
      "VARIANT_ID": "98632", 
      "TIME": "5752", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-98632"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-99000\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49500", 
      "VARIANT_ID": "99000", 
      "TIME": "5774", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-99000"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-99676\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49838", 
      "VARIANT_ID": "99676", 
      "TIME": "5818", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-99676"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-99818\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49909", 
      "VARIANT_ID": "99818", 
      "TIME": "5827", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-99818"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-99938\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "49969", 
      "VARIANT_ID": "99938", 
      "TIME": "5834", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-99938"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100092\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50046", 
      "VARIANT_ID": "100092", 
      "TIME": "5844", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100092"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100250\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50125", 
      "VARIANT_ID": "100250", 
      "TIME": "5853", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100250"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100322\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50161", 
      "VARIANT_ID": "100322", 
      "TIME": "5860", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100322"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100336\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50168", 
      "VARIANT_ID": "100336", 
      "TIME": "5861", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100336"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100412\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50206", 
      "VARIANT_ID": "100412", 
      "TIME": "5866", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100412"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100708\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50354", 
      "VARIANT_ID": "100708", 
      "TIME": "5883", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100708"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100744\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50372", 
      "VARIANT_ID": "100744", 
      "TIME": "5885", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100744"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100790\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50395", 
      "VARIANT_ID": "100790", 
      "TIME": "5889", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100790"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100828\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50414", 
      "VARIANT_ID": "100828", 
      "TIME": "5892", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100828"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-100906\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50453", 
      "VARIANT_ID": "100906", 
      "TIME": "5896", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-100906"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101080\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50540", 
      "VARIANT_ID": "101080", 
      "TIME": "5907", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101080"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101088\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50544", 
      "VARIANT_ID": "101088", 
      "TIME": "5907", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101088"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101160\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50580", 
      "VARIANT_ID": "101160", 
      "TIME": "5911", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101160"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101240\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50620", 
      "VARIANT_ID": "101240", 
      "TIME": "5916", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101240"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101310\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50655", 
      "VARIANT_ID": "101310", 
      "TIME": "5921", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101310"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101616\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50808", 
      "VARIANT_ID": "101616", 
      "TIME": "5940", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101616"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101632\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50816", 
      "VARIANT_ID": "101632", 
      "TIME": "5940", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101632"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101694\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50847", 
      "VARIANT_ID": "101694", 
      "TIME": "5944", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101694"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101890\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50945", 
      "VARIANT_ID": "101890", 
      "TIME": "5955", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101890"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-101956\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "50978", 
      "VARIANT_ID": "101956", 
      "TIME": "5960", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-101956"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102014\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51007", 
      "VARIANT_ID": "102014", 
      "TIME": "5963", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102014"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102344\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51172", 
      "VARIANT_ID": "102344", 
      "TIME": "5985", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102344"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102390\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51195", 
      "VARIANT_ID": "102390", 
      "TIME": "5988", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102390"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102670\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51335", 
      "VARIANT_ID": "102670", 
      "TIME": "6006", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102670"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-102764\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51382", 
      "VARIANT_ID": "102764", 
      "TIME": "6011", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-102764"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103002\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51501", 
      "VARIANT_ID": "103002", 
      "TIME": "6028", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103002"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103190\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51595", 
      "VARIANT_ID": "103190", 
      "TIME": "6041", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103190"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103206\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51603", 
      "VARIANT_ID": "103206", 
      "TIME": "6042", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103206"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103430\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51715", 
      "VARIANT_ID": "103430", 
      "TIME": "6057", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103430"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103504\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51752", 
      "VARIANT_ID": "103504", 
      "TIME": "6060", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103504"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103760\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51880", 
      "VARIANT_ID": "103760", 
      "TIME": "6077", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103760"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103762\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51881", 
      "VARIANT_ID": "103762", 
      "TIME": "6077", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103762"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-103896\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "51948", 
      "VARIANT_ID": "103896", 
      "TIME": "6085", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-103896"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104394\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52197", 
      "VARIANT_ID": "104394", 
      "TIME": "6117", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104394"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104432\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52216", 
      "VARIANT_ID": "104432", 
      "TIME": "6120", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104432"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104494\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52247", 
      "VARIANT_ID": "104494", 
      "TIME": "6124", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104494"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104678\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52339", 
      "VARIANT_ID": "104678", 
      "TIME": "6135", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104678"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104762\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52381", 
      "VARIANT_ID": "104762", 
      "TIME": "6140", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104762"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104798\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52399", 
      "VARIANT_ID": "104798", 
      "TIME": "6143", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104798"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104822\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52411", 
      "VARIANT_ID": "104822", 
      "TIME": "6145", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104822"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104838\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52419", 
      "VARIANT_ID": "104838", 
      "TIME": "6145", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104838"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-104988\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52494", 
      "VARIANT_ID": "104988", 
      "TIME": "6156", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-104988"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-105144\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52572", 
      "VARIANT_ID": "105144", 
      "TIME": "6165", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-105144"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-105296\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52648", 
      "VARIANT_ID": "105296", 
      "TIME": "6176", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-105296"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-105460\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52730", 
      "VARIANT_ID": "105460", 
      "TIME": "6185", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-105460"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-105696\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "52848", 
      "VARIANT_ID": "105696", 
      "TIME": "6200", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-105696"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106202\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53101", 
      "VARIANT_ID": "106202", 
      "TIME": "6232", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106202"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106388\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53194", 
      "VARIANT_ID": "106388", 
      "TIME": "6244", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106388"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106556\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53278", 
      "VARIANT_ID": "106556", 
      "TIME": "6255", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106556"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106646\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53323", 
      "VARIANT_ID": "106646", 
      "TIME": "6259", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106646"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106750\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53375", 
      "VARIANT_ID": "106750", 
      "TIME": "6267", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106750"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106856\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53428", 
      "VARIANT_ID": "106856", 
      "TIME": "6273", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106856"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-106870\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53435", 
      "VARIANT_ID": "106870", 
      "TIME": "6274", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-106870"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-107020\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53510", 
      "VARIANT_ID": "107020", 
      "TIME": "6282", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-107020"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-107134\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53567", 
      "VARIANT_ID": "107134", 
      "TIME": "6290", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-107134"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-107800\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53900", 
      "VARIANT_ID": "107800", 
      "TIME": "6329", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-107800"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-107838\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53919", 
      "VARIANT_ID": "107838", 
      "TIME": "6332", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-107838"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-107920\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "53960", 
      "VARIANT_ID": "107920", 
      "TIME": "6336", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-107920"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108036\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54018", 
      "VARIANT_ID": "108036", 
      "TIME": "6344", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108036"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108074\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54037", 
      "VARIANT_ID": "108074", 
      "TIME": "6346", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108074"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108194\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54097", 
      "VARIANT_ID": "108194", 
      "TIME": "6354", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108194"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108220\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54110", 
      "VARIANT_ID": "108220", 
      "TIME": "6356", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108220"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108254\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54127", 
      "VARIANT_ID": "108254", 
      "TIME": "6358", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108254"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108354\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54177", 
      "VARIANT_ID": "108354", 
      "TIME": "6364", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108354"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108398\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54199", 
      "VARIANT_ID": "108398", 
      "TIME": "6367", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108398"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108506\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54253", 
      "VARIANT_ID": "108506", 
      "TIME": "6373", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108506"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108574\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54287", 
      "VARIANT_ID": "108574", 
      "TIME": "6378", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108574"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108690\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54345", 
      "VARIANT_ID": "108690", 
      "TIME": "6384", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108690"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108702\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54351", 
      "VARIANT_ID": "108702", 
      "TIME": "6386", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108702"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108760\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54380", 
      "VARIANT_ID": "108760", 
      "TIME": "6390", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108760"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108928\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54464", 
      "VARIANT_ID": "108928", 
      "TIME": "6399", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108928"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108930\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54465", 
      "VARIANT_ID": "108930", 
      "TIME": "6399", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108930"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108950\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54475", 
      "VARIANT_ID": "108950", 
      "TIME": "6401", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108950"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108956\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54478", 
      "VARIANT_ID": "108956", 
      "TIME": "6402", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108956"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-108980\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54490", 
      "VARIANT_ID": "108980", 
      "TIME": "6403", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-108980"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109000\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54500", 
      "VARIANT_ID": "109000", 
      "TIME": "6405", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109000"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109150\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54575", 
      "VARIANT_ID": "109150", 
      "TIME": "6414", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109150"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109270\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54635", 
      "VARIANT_ID": "109270", 
      "TIME": "6422", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109270"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109518\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54759", 
      "VARIANT_ID": "109518", 
      "TIME": "6437", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109518"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109836\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54918", 
      "VARIANT_ID": "109836", 
      "TIME": "6456", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109836"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109888\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54944", 
      "VARIANT_ID": "109888", 
      "TIME": "6459", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109888"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-109962\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "54981", 
      "VARIANT_ID": "109962", 
      "TIME": "6465", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-109962"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110024\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55012", 
      "VARIANT_ID": "110024", 
      "TIME": "6468", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110024"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110116\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55058", 
      "VARIANT_ID": "110116", 
      "TIME": "6473", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110116"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110240\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55120", 
      "VARIANT_ID": "110240", 
      "TIME": "6480", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110240"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110638\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55319", 
      "VARIANT_ID": "110638", 
      "TIME": "6505", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110638"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110666\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55333", 
      "VARIANT_ID": "110666", 
      "TIME": "6508", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110666"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110762\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55381", 
      "VARIANT_ID": "110762", 
      "TIME": "6513", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110762"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110866\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55433", 
      "VARIANT_ID": "110866", 
      "TIME": "6520", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110866"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110896\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55448", 
      "VARIANT_ID": "110896", 
      "TIME": "6522", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110896"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-110982\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55491", 
      "VARIANT_ID": "110982", 
      "TIME": "6527", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-110982"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111072\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55536", 
      "VARIANT_ID": "111072", 
      "TIME": "6533", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111072"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111078\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55539", 
      "VARIANT_ID": "111078", 
      "TIME": "6533", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111078"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111160\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55580", 
      "VARIANT_ID": "111160", 
      "TIME": "6538", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111160"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111182\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55591", 
      "VARIANT_ID": "111182", 
      "TIME": "6541", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111182"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111454\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55727", 
      "VARIANT_ID": "111454", 
      "TIME": "6557", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111454"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111520\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55760", 
      "VARIANT_ID": "111520", 
      "TIME": "6562", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111520"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-111754\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "55877", 
      "VARIANT_ID": "111754", 
      "TIME": "6576", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-111754"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112140\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56070", 
      "VARIANT_ID": "112140", 
      "TIME": "6600", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112140"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112178\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56089", 
      "VARIANT_ID": "112178", 
      "TIME": "6603", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112178"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112400\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56200", 
      "VARIANT_ID": "112400", 
      "TIME": "6615", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112400"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112620\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56310", 
      "VARIANT_ID": "112620", 
      "TIME": "6627", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112620"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112624\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56312", 
      "VARIANT_ID": "112624", 
      "TIME": "6627", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112624"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112658\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56329", 
      "VARIANT_ID": "112658", 
      "TIME": "6630", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112658"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-112868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56434", 
      "VARIANT_ID": "112868", 
      "TIME": "6642", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-112868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113056\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56528", 
      "VARIANT_ID": "113056", 
      "TIME": "6653", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113056"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113066\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56533", 
      "VARIANT_ID": "113066", 
      "TIME": "6655", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113066"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113148\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56574", 
      "VARIANT_ID": "113148", 
      "TIME": "6659", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113148"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113178\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56589", 
      "VARIANT_ID": "113178", 
      "TIME": "6662", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113178"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113586\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56793", 
      "VARIANT_ID": "113586", 
      "TIME": "6686", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113586"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113742\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56871", 
      "VARIANT_ID": "113742", 
      "TIME": "6696", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113742"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-113996\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "56998", 
      "VARIANT_ID": "113996", 
      "TIME": "6711", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-113996"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114104\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57052", 
      "VARIANT_ID": "114104", 
      "TIME": "6718", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114104"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114182\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57091", 
      "VARIANT_ID": "114182", 
      "TIME": "6722", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114182"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114280\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57140", 
      "VARIANT_ID": "114280", 
      "TIME": "6728", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114280"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114284\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57142", 
      "VARIANT_ID": "114284", 
      "TIME": "6728", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114284"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114288\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57144", 
      "VARIANT_ID": "114288", 
      "TIME": "6729", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114288"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114672\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57336", 
      "VARIANT_ID": "114672", 
      "TIME": "6752", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114672"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114746\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57373", 
      "VARIANT_ID": "114746", 
      "TIME": "6756", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114746"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114760\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57380", 
      "VARIANT_ID": "114760", 
      "TIME": "6757", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114760"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-114844\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57422", 
      "VARIANT_ID": "114844", 
      "TIME": "6763", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-114844"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115250\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57625", 
      "VARIANT_ID": "115250", 
      "TIME": "6789", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115250"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115316\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57658", 
      "VARIANT_ID": "115316", 
      "TIME": "6792", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115316"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115452\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57726", 
      "VARIANT_ID": "115452", 
      "TIME": "6801", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115452"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115574\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57787", 
      "VARIANT_ID": "115574", 
      "TIME": "6809", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115574"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115732\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57866", 
      "VARIANT_ID": "115732", 
      "TIME": "6819", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115732"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115762\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57881", 
      "VARIANT_ID": "115762", 
      "TIME": "6821", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115762"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115780\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57890", 
      "VARIANT_ID": "115780", 
      "TIME": "6823", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115780"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-115802\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "57901", 
      "VARIANT_ID": "115802", 
      "TIME": "6824", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-115802"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-116010\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58005", 
      "VARIANT_ID": "116010", 
      "TIME": "6837", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-116010"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-116054\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58027", 
      "VARIANT_ID": "116054", 
      "TIME": "6840", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-116054"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-116262\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58131", 
      "VARIANT_ID": "116262", 
      "TIME": "6853", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-116262"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-116314\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58157", 
      "VARIANT_ID": "116314", 
      "TIME": "6856", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-116314"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-116472\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58236", 
      "VARIANT_ID": "116472", 
      "TIME": "6865", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-116472"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117036\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58518", 
      "VARIANT_ID": "117036", 
      "TIME": "6898", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117036"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117088\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58544", 
      "VARIANT_ID": "117088", 
      "TIME": "6902", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117088"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117190\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58595", 
      "VARIANT_ID": "117190", 
      "TIME": "6908", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117190"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117306\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58653", 
      "VARIANT_ID": "117306", 
      "TIME": "6915", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117306"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117572\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58786", 
      "VARIANT_ID": "117572", 
      "TIME": "6932", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117572"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117604\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58802", 
      "VARIANT_ID": "117604", 
      "TIME": "6933", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117604"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-117874\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58937", 
      "VARIANT_ID": "117874", 
      "TIME": "6950", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-117874"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118168\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59084", 
      "VARIANT_ID": "118168", 
      "TIME": "6968", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118168"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118214\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59107", 
      "VARIANT_ID": "118214", 
      "TIME": "6970", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118214"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118314\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59157", 
      "VARIANT_ID": "118314", 
      "TIME": "6977", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118314"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118450\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59225", 
      "VARIANT_ID": "118450", 
      "TIME": "6986", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118450"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118640\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59320", 
      "VARIANT_ID": "118640", 
      "TIME": "6998", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118640"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118844\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59422", 
      "VARIANT_ID": "118844", 
      "TIME": "7010", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118844"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-118912\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59456", 
      "VARIANT_ID": "118912", 
      "TIME": "7015", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-118912"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119044\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59522", 
      "VARIANT_ID": "119044", 
      "TIME": "7022", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119044"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119216\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59608", 
      "VARIANT_ID": "119216", 
      "TIME": "7034", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119216"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119248\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59624", 
      "VARIANT_ID": "119248", 
      "TIME": "7035", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119248"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119278\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59639", 
      "VARIANT_ID": "119278", 
      "TIME": "7038", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119278"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119518\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59759", 
      "VARIANT_ID": "119518", 
      "TIME": "7054", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119518"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119616\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59808", 
      "VARIANT_ID": "119616", 
      "TIME": "7060", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119616"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119844\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59922", 
      "VARIANT_ID": "119844", 
      "TIME": "7074", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119844"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119856\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59928", 
      "VARIANT_ID": "119856", 
      "TIME": "7074", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119856"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -22,21 +22,21 @@\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-119868\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "25", 
          "MP_RANKING": "6", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "59934", 
      "VARIANT_ID": "119868", 
      "TIME": "7076", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-119868"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120284\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60142", 
      "VARIANT_ID": "120284", 
      "TIME": "7103", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120284"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120444\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60222", 
      "VARIANT_ID": "120444", 
      "TIME": "7113", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120444"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120454\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60227", 
      "VARIANT_ID": "120454", 
      "TIME": "7114", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120454"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120468\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60234", 
      "VARIANT_ID": "120468", 
      "TIME": "7115", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120468"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120664\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60332", 
      "VARIANT_ID": "120664", 
      "TIME": "7126", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120664"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -21,22 +21,22 @@\\n \\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n \\t\\t\\t\\tif (i == j) {\\n \\t\\t\\t\\t\\tlength_by_path.put(edge, 0);\\n-\\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}else \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120720\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, 0)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "23", 
          "MP_RANKING": "5", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60360", 
      "VARIANT_ID": "120720", 
      "TIME": "7130", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120720"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-120806\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60403", 
      "VARIANT_ID": "120806", 
      "TIME": "7136", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-120806"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -26,17 +26,17 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-121076\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF)", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "28", 
          "MP_RANKING": "8", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60538", 
      "VARIANT_ID": "121076", 
      "TIME": "7153", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-121076"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-121372\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60686", 
      "VARIANT_ID": "121372", 
      "TIME": "7171", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-121372"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-121422\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "20", 
          "MP_RANKING": "2", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60711", 
      "VARIANT_ID": "121422", 
      "TIME": "7175", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-121422"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -24,19 +24,19 @@\\n \\t\\t\\t\\t}else\\n \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\t\\treturn length_by_path;}else { \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-121662\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "length_by_path.put(edge, length_by_edge.get(edge))", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "26", 
          "MP_RANKING": "7", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60831", 
      "VARIANT_ID": "121662", 
      "TIME": "7191", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-121662"
    }, 
    {
      "PATCH_DIFF_ORIG": "--- \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n+++ \\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHSjava\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-121746\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", 
          "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "return length_by_path", 
          "INGREDIENT_PARENT": "return length_by_path", 
          "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "InsertAfterOp", 
          "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/src\\/main\\/java\\/SHORTEST_PATH_LENGTHS.java", 
          "LINE": "22", 
          "MP_RANKING": "4", 
          "SUSPICIOUNESS": "1", 
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "60873", 
      "VARIANT_ID": "121746", 
      "TIME": "7197", 
      "VALIDATION": "|true|0|4|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-121746"
    }
  ]
}