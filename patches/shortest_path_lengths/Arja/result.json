{
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 21, 
          "faulty": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }
  ]
}