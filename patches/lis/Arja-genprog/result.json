{
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "prefix_lengths.add(j);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Delete", 
          "seed": "for (int val : arr) {\n  ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);\n  for (int j=1; j < longest + 1; j++) {\n    if (arr[ends.get(j)] < val) {\n      prefix_lengths.add(j);\n    }\n  }\n  int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  if (length == longest || val < arr[ends.get(length + 1)]) {\n    ends.put(length + 1,i);\n    longest=length + 1;\n  }\n  i++;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Delete", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "longest=length + 1;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "longest=length + 1;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "prefix_lengths.add(j);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Delete", 
          "seed": "for (int val : arr) {\n  ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);\n  for (int j=1; j < longest + 1; j++) {\n    if (arr[ends.get(j)] < val) {\n      prefix_lengths.add(j);\n    }\n  }\n  int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n  if (length == longest || val < arr[ends.get(length + 1)]) {\n    ends.put(length + 1,i);\n    longest=length + 1;\n  }\n  i++;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "prefix_lengths.add(j);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "prefix_lengths.add(j);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "prefix_lengths.add(j);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "longest=length + 1;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "longest=length + 1;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ]
    }
  ]
}