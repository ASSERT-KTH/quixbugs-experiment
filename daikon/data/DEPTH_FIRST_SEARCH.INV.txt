Daikon version 5.7.2, released November 7, 2018; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search:::OBJECT
this has only one value
this.val$nodesvisited has only one value
this.val$nodesvisited.getClass().getName() == java.util.HashSet.class
this.val$goalnode has only one value
this.val$goalnode.value has only one value
this.val$goalnode.value.toString == "Westminster"
this.val$goalnode.successors has only one value
this.val$goalnode.successors[] == []
this.val$goalnode.successors[].getClass().getName() == []
this.val$goalnode.predecessors has only one value
this.val$goalnode.predecessors[] == []
this.val$goalnode.predecessors[].getClass().getName() == []
this.val$goalnode.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.Search(java.util.Set, java_programs.Node):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == java.util.HashSet.class
$hidden$2 has only one value
$hidden$2.value has only one value
$hidden$2.value.toString == "Westminster"
$hidden$2.successors has only one value
$hidden$2.successors[] == []
$hidden$2.successors[].getClass().getName() == []
$hidden$2.predecessors has only one value
$hidden$2.predecessors[] == []
$hidden$2.predecessors[].getClass().getName() == []
$hidden$2.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.Search(java.util.Set, java_programs.Node):::EXIT
this.val$nodesvisited == orig($hidden$1)
this.val$nodesvisited.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$goalnode == orig($hidden$2)
this.val$goalnode.value == $hidden$2.value
this.val$goalnode.successors == $hidden$2.successors
this.val$goalnode.predecessors == $hidden$2.predecessors
$hidden$2.value == orig($hidden$2.value)
$hidden$2.value.toString == orig($hidden$2.value.toString)
$hidden$2.successors == orig($hidden$2.successors)
$hidden$2.successors[] == orig($hidden$2.successors[])
$hidden$2.predecessors == orig($hidden$2.predecessors)
$hidden$2.predecessors[] == orig($hidden$2.predecessors[])
$hidden$2.successor == orig($hidden$2.successor)
$hidden$2.value has only one value
$hidden$2.value.toString == "Westminster"
$hidden$2.successors has only one value
$hidden$2.successors[] == []
$hidden$2.successors[].getClass().getName() == []
$hidden$2.predecessors has only one value
$hidden$2.predecessors[] == []
$hidden$2.predecessors[].getClass().getName() == []
$hidden$2.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::ENTER
node.successors[].getClass().getName() elements == java_programs.Node.class
node.predecessors[] == []
node.predecessors[].getClass().getName() == []
node.successor == null
size(node.successors[]) one of { 0, 1, 2 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT37
this.val$goalnode == orig(node)
this.val$goalnode.value == node.value
this.val$goalnode.successors == node.successors
this.val$goalnode.predecessors == node.predecessors
node.value == orig(this.val$goalnode.value)
node.successors == orig(this.val$goalnode.successors)
node.predecessors == orig(this.val$goalnode.predecessors)
node.value has only one value
node.value.toString == "Westminster"
node.successors has only one value
node.successors[] == []
node.successors[].getClass().getName() == []
node.predecessors has only one value
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT37;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT41
node.successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
node.predecessors == null
size(node.successors[]) one of { 1, 2 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT41;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT
this.val$nodesvisited == orig(this.val$nodesvisited)
this.val$nodesvisited.getClass().getName() == orig(this.val$nodesvisited.getClass().getName())
this.val$goalnode == orig(this.val$goalnode)
this.val$goalnode.value == orig(this.val$goalnode.value)
this.val$goalnode.value.toString == orig(this.val$goalnode.value.toString)
this.val$goalnode.successors == orig(this.val$goalnode.successors)
this.val$goalnode.successors[] == orig(this.val$goalnode.successors[])
this.val$goalnode.predecessors == orig(this.val$goalnode.predecessors)
this.val$goalnode.predecessors[] == orig(this.val$goalnode.predecessors[])
this.val$goalnode.successor == orig(this.val$goalnode.successor)
node.value == orig(node.value)
node.value.toString == orig(node.value.toString)
node.successors == orig(node.successors)
node.successors[] == orig(node.successors[])
node.predecessors == orig(node.predecessors)
node.predecessors[] == orig(node.predecessors[])
node.successor == orig(node.successor)
node.successors[].getClass().getName() elements == java_programs.Node.class
node.predecessors[] == []
node.predecessors[].getClass().getName() == []
node.successor == null
return == true
size(node.successors[]) one of { 0, 1, 2 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::ENTER
startnode has only one value
startnode.value has only one value
startnode.value.toString == "Tottenham Court Road"
startnode.successors has only one value
startnode.successors[] contains no nulls and has only one value, of length 2
startnode.successors[].getClass().getName() == [java_programs.Node, java_programs.Node]
startnode.successors[].getClass().getName() elements == java_programs.Node.class
startnode.predecessors == null
startnode.successor == null
goalnode has only one value
goalnode.value has only one value
goalnode.value.toString == "Westminster"
goalnode.successors has only one value
goalnode.successors[] == []
goalnode.successors[].getClass().getName() == []
goalnode.predecessors has only one value
goalnode.predecessors[] == []
goalnode.predecessors[].getClass().getName() == []
goalnode.successor == null
size(startnode.successors[]) == 2
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::EXIT
startnode.value == orig(startnode.value)
startnode.value.toString == orig(startnode.value.toString)
startnode.successors == orig(startnode.successors)
startnode.successors[] == orig(startnode.successors[])
startnode.predecessors == orig(startnode.predecessors)
startnode.successor == orig(startnode.successor)
goalnode.value == orig(goalnode.value)
goalnode.value.toString == orig(goalnode.value.toString)
goalnode.successors == orig(goalnode.successors)
goalnode.successors[] == orig(goalnode.successors[])
goalnode.predecessors == orig(goalnode.predecessors)
goalnode.predecessors[] == orig(goalnode.predecessors[])
goalnode.successor == orig(goalnode.successor)
startnode.value has only one value
startnode.value.toString == "Tottenham Court Road"
startnode.successors has only one value
startnode.successors[] contains no nulls and has only one value, of length 2
startnode.successors[].getClass().getName() == [java_programs.Node, java_programs.Node]
startnode.successors[].getClass().getName() elements == java_programs.Node.class
startnode.predecessors == null
startnode.successor == null
goalnode.value has only one value
goalnode.value.toString == "Westminster"
goalnode.successors has only one value
goalnode.successors[] == []
goalnode.successors[].getClass().getName() == []
goalnode.predecessors has only one value
goalnode.predecessors[] == []
goalnode.predecessors[].getClass().getName() == []
goalnode.successor == null
return == true
size(startnode.successors[]) == 2
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::EXIT;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
java_programs.Node:::OBJECT
this.value != null
this.successors != null
this.successors[] elements != null
this.successors[].getClass().getName() elements == java_programs.Node.class
this.predecessors[] == []
this.predecessors[].getClass().getName() == []
this.successor == null
size(this.successors[]) one of { 0, 1, 2 }
===========================================================================
java_programs.Node.Node(java.lang.String):::ENTER
value has only one value
value.toString == "Westminster"
===========================================================================
java_programs.Node.Node(java.lang.String):::EXIT
this.value == orig(value)
value.toString == orig(value.toString)
this.value has only one value
this.value.toString == "Westminster"
this.successors has only one value
this.successors[] == []
this.successors[].getClass().getName() == []
this.predecessors has only one value
value.toString == "Westminster"
===========================================================================
java_programs.Node.Node(java.lang.String, java.util.ArrayList):::ENTER
successors[].getClass().getName() elements == java_programs.Node.class
successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
size(successors[]) one of { 1, 2 }
===========================================================================
java_programs.Node.Node(java.lang.String, java.util.ArrayList):::EXIT
this.value == orig(value)
this.successors == orig(successors)
value.toString == orig(value.toString)
successors[] == orig(successors[])
this.successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
this.predecessors == null
successors[].getClass().getName() elements == java_programs.Node.class
successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
size(this.successors[]) one of { 1, 2 }
===========================================================================
java_programs.Node.getSuccessors():::ENTER
this.successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
this.predecessors == null
size(this.successors[]) one of { 1, 2 }
===========================================================================
java_programs.Node.getSuccessors():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.successors == return
this.successors[] == orig(this.successors[])
this.predecessors == orig(this.predecessors)
this.successor == orig(this.successor)
return == orig(this.successors)
this.successors[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
this.predecessors == null
return[].getClass().getName() elements == java_programs.Node.class
return[].getClass().getName() one of { [java_programs.Node], [java_programs.Node, java_programs.Node] }
size(this.successors[]) one of { 1, 2 }
size(return[]) one of { 1, 2 }
Exiting Daikon.
