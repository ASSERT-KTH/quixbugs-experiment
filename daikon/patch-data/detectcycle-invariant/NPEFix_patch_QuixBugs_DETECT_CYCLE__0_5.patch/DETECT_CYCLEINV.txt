Daikon version 5.7.2, released November 7, 2018; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::ENTER
node.value.toString one of { "2", "5" }
node.successors == null
node.predecessors == null
node.successor.value.toString one of { "1", "4" }
node.successor.successors[] == []
node.successor.successors[].getClass().getName() == []
node.successor.predecessors[] == []
node.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT23
node.value has only one value
node.value.toString == "5"
node.successor has only one value
node.successor.value has only one value
node.successor.value.toString == "4"
node.successor.successors == null
node.successor.predecessors == null
node.successor.successor has only one value
return == false
orig(node) has only one value
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT23;condition="not(return == true)"
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT30
return == true
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT30;condition="return == true"
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT
node.value == orig(node.value)
node.value.toString == orig(node.value.toString)
node.successors == orig(node.successors)
node.predecessors == orig(node.predecessors)
node.successor == orig(node.successor)
node.successor.value == orig(node.successor.value)
node.successor.value.toString == orig(node.successor.value.toString)
node.successor.successors == orig(node.successor.successors)
node.successor.successors[] == orig(node.successor.successors[])
node.successor.predecessors == orig(node.successor.predecessors)
node.successor.predecessors[] == orig(node.successor.predecessors[])
node.successor.successor == orig(node.successor.successor)
(return == false)  ==>  (node.successor has only one value)
(return == false)  ==>  (node.successor.predecessors == null)
(return == false)  ==>  (node.successor.successor has only one value)
(return == false)  ==>  (node.successor.successors == null)
(return == false)  ==>  (node.successor.value has only one value)
(return == false)  ==>  (node.successor.value.toString == "4")
(return == false)  ==>  (node.value has only one value)
(return == false)  ==>  (node.value.toString == "5")
(return == false)  ==>  (orig(node) has only one value)
(return == true)  ==>  (node.successor.predecessors[] == [])
(return == true)  ==>  (node.successor.predecessors[].getClass().getName() == [])
(return == true)  ==>  (node.successor.successors[] == [])
(return == true)  ==>  (node.successor.successors[].getClass().getName() == [])
(return == true)  ==>  (node.successor.value.toString one of { "1", "4" })
(return == true)  ==>  (node.value.toString one of { "2", "5" })
node.value.toString one of { "2", "5" }
node.successors == null
node.predecessors == null
node.successor.value.toString one of { "1", "4" }
node.successor.successors[] == []
node.successor.successors[].getClass().getName() == []
node.successor.predecessors[] == []
node.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT;condition="return == true"
return == true
===========================================================================
java_programs.DETECT_CYCLE.detect_cycle(java_programs.Node):::EXIT;condition="not(return == true)"
node.value has only one value
node.value.toString == "5"
node.successor has only one value
node.successor.value has only one value
node.successor.value.toString == "4"
node.successor.successors == null
node.successor.predecessors == null
node.successor.successor has only one value
return == false
orig(node) has only one value
===========================================================================
java_programs.DETECT_CYCLE.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
java_programs.DETECT_CYCLE.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
java_programs.Node:::OBJECT
this.value != null
this.successors[] == []
this.successors[].getClass().getName() == []
this.predecessors[] == []
this.predecessors[].getClass().getName() == []
this.successor.value != null
this.successor.successors[] == []
this.successor.successors[].getClass().getName() == []
this.successor.predecessors[] == []
this.successor.predecessors[].getClass().getName() == []
this.successor.successor.value != null
this.successor.successor.successors[] == []
this.successor.successor.successors[].getClass().getName() == []
this.successor.successor.predecessors[] == []
this.successor.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.Node.Node(java.lang.String):::ENTER
value has only one value
value.toString == "1"
===========================================================================
java_programs.Node.Node(java.lang.String):::EXIT
this.value == orig(value)
value.toString == orig(value.toString)
this.value has only one value
this.value.toString == "1"
this.successors has only one value
this.predecessors has only one value
this.successor == null
value.toString == "1"
===========================================================================
java_programs.Node.Node(java.lang.String, java_programs.Node):::ENTER
successor.successors[] == []
successor.successors[].getClass().getName() == []
successor.predecessors[] == []
successor.predecessors[].getClass().getName() == []
successor.successor.value.toString one of { "1", "2", "3" }
successor.successor.successors[] == []
successor.successor.successors[].getClass().getName() == []
successor.successor.predecessors[] == []
successor.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.Node.Node(java.lang.String, java_programs.Node):::EXIT
this.value == orig(value)
this.successor == orig(successor)
this.successor.value == successor.value
this.successor.successors == successor.successors
this.successor.predecessors == successor.predecessors
this.successor.successor == successor.successor
this.successor.successor.value == successor.successor.value
this.successor.successor.successors == successor.successor.successors
this.successor.successor.predecessors == successor.successor.predecessors
this.successor.successor.successor == successor.successor.successor
value.toString == orig(value.toString)
successor.value == orig(successor.value)
successor.value.toString == orig(successor.value.toString)
successor.successors == orig(successor.successors)
successor.successors[] == orig(successor.successors[])
successor.predecessors == orig(successor.predecessors)
successor.predecessors[] == orig(successor.predecessors[])
successor.successor == orig(successor.successor)
successor.successor.value == orig(successor.successor.value)
successor.successor.value.toString == orig(successor.successor.value.toString)
successor.successor.successors == orig(successor.successor.successors)
successor.successor.successors[] == orig(successor.successor.successors[])
successor.successor.predecessors == orig(successor.successor.predecessors)
successor.successor.predecessors[] == orig(successor.successor.predecessors[])
successor.successor.successor == orig(successor.successor.successor)
this.successors == null
this.predecessors == null
this.successor.successor.value.toString one of { "1", "2", "3" }
successor.successors[] == []
successor.successors[].getClass().getName() == []
successor.predecessors[] == []
successor.predecessors[].getClass().getName() == []
successor.successor.value.toString one of { "1", "2", "3" }
successor.successor.successors[] == []
successor.successor.successors[].getClass().getName() == []
successor.successor.predecessors[] == []
successor.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.Node.getSuccessor():::ENTER
===========================================================================
java_programs.Node.getSuccessor():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.successors == orig(this.successors)
this.successors[] == orig(this.successors[])
this.predecessors == orig(this.predecessors)
this.predecessors[] == orig(this.predecessors[])
this.successor == return
this.successor.value == return.value
this.successor.value.toString == orig(this.successor.value.toString)
this.successor.successors == return.successors
this.successor.successors[] == orig(this.successor.successors[])
this.successor.predecessors == return.predecessors
this.successor.predecessors[] == orig(this.successor.predecessors[])
this.successor.successor == return.successor
this.successor.successor.value == return.successor.value
this.successor.successor.value.toString == orig(this.successor.successor.value.toString)
this.successor.successor.successors == return.successor.successors
this.successor.successor.successors[] == orig(this.successor.successor.successors[])
this.successor.successor.predecessors == return.successor.predecessors
this.successor.successor.predecessors[] == orig(this.successor.successor.predecessors[])
this.successor.successor.successor == return.successor.successor
return == orig(this.successor)
return.value == orig(this.successor.value)
return.successors == orig(this.successor.successors)
return.predecessors == orig(this.successor.predecessors)
return.successor == orig(this.successor.successor)
return.successor.value == orig(this.successor.successor.value)
return.successor.successors == orig(this.successor.successor.successors)
return.successor.predecessors == orig(this.successor.successor.predecessors)
return.successor.successor == orig(this.successor.successor.successor)
return.value != null
return.successors[] == []
return.successors[].getClass().getName() == []
return.predecessors[] == []
return.predecessors[].getClass().getName() == []
return.successor.value != null
return.successor.successors[] == []
return.successor.successors[].getClass().getName() == []
return.successor.predecessors[] == []
return.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.Node.setSuccessor(java_programs.Node):::ENTER
this has only one value
this.value has only one value
this.value.toString == "1"
this.successors has only one value
this.predecessors has only one value
this.successor.value has only one value
this.successor.value.toString == "5"
this.successor.successors == null
this.successor.predecessors == null
this.successor.successor has only one value
this.successor.successor.value has only one value
this.successor.successor.value.toString == "4"
this.successor.successor.successors == null
this.successor.successor.predecessors == null
this.successor.successor.successor has only one value
successor.value.toString one of { "2", "5" }
successor.successors == null
successor.predecessors == null
successor.successor.value.toString one of { "1", "4" }
successor.successor.successors[] == []
successor.successor.successors[].getClass().getName() == []
successor.successor.predecessors[] == []
successor.successor.predecessors[].getClass().getName() == []
===========================================================================
java_programs.Node.setSuccessor(java_programs.Node):::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.successors == orig(this.successors)
this.successors[] == orig(this.successors[])
this.predecessors == orig(this.predecessors)
this.predecessors[] == orig(this.predecessors[])
this.successor == orig(successor)
this.successor.value == successor.value
this.successor.successors == orig(this.successor.successors)
this.successor.predecessors == orig(this.successor.predecessors)
this.successor.successor == successor.successor
this.successor.successor.value == successor.successor.value
this.successor.successor.successors == successor.successor.successors
this.successor.successor.predecessors == successor.successor.predecessors
this.successor.successor.successor == successor.successor.successor
successor.value == orig(successor.value)
successor.value.toString == orig(successor.value.toString)
successor.successors == orig(successor.successors)
successor.predecessors == orig(successor.predecessors)
successor.successor == orig(successor.successor)
successor.successor.value == orig(successor.successor.value)
successor.successor.value.toString == orig(successor.successor.value.toString)
successor.successor.successors == orig(successor.successor.successors)
successor.successor.successors[] == orig(successor.successor.successors[])
successor.successor.predecessors == orig(successor.successor.predecessors)
successor.successor.predecessors[] == orig(successor.successor.predecessors[])
this.value has only one value
this.value.toString == "1"
this.successors has only one value
this.predecessors has only one value
this.successor.value.toString one of { "2", "5" }
this.successor.successors == null
this.successor.predecessors == null
this.successor.successor.value.toString one of { "1", "4" }
successor.value.toString one of { "2", "5" }
successor.successors == null
successor.predecessors == null
successor.successor.value.toString one of { "1", "4" }
successor.successor.successors[] == []
successor.successor.successors[].getClass().getName() == []
successor.successor.predecessors[] == []
successor.successor.predecessors[].getClass().getName() == []
Exiting Daikon.
