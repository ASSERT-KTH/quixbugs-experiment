Daikon version 5.7.2, released November 7, 2018; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search:::OBJECT
this.val$nodesvisited != null
this.val$nodesvisited.getClass().getName() == java.util.HashSet.class
this.val$goalnode != null
this.val$goalnode.value != null
this.val$goalnode.value.toString one of { "E", "F", "Westminster" }
this.val$goalnode.successors != null
this.val$goalnode.successors[] == []
this.val$goalnode.successors[].getClass().getName() == []
this.val$goalnode.predecessors != null
this.val$goalnode.predecessors[] == []
this.val$goalnode.predecessors[].getClass().getName() == []
this.val$goalnode.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.Search(java.util.Set, java_programs.Node):::ENTER
$hidden$1.getClass().getName() == java.util.HashSet.class
$hidden$2.value.toString one of { "E", "F", "Westminster" }
$hidden$2.successors[] == []
$hidden$2.successors[].getClass().getName() == []
$hidden$2.predecessors[] == []
$hidden$2.predecessors[].getClass().getName() == []
$hidden$2.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.Search(java.util.Set, java_programs.Node):::EXIT
this.val$nodesvisited == orig($hidden$1)
this.val$nodesvisited.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$goalnode == orig($hidden$2)
this.val$goalnode.value == $hidden$2.value
this.val$goalnode.successors == $hidden$2.successors
this.val$goalnode.predecessors == $hidden$2.predecessors
$hidden$2.value == orig($hidden$2.value)
$hidden$2.value.toString == orig($hidden$2.value.toString)
$hidden$2.successors == orig($hidden$2.successors)
$hidden$2.successors[] == orig($hidden$2.successors[])
$hidden$2.predecessors == orig($hidden$2.predecessors)
$hidden$2.predecessors[] == orig($hidden$2.predecessors[])
$hidden$2.successor == orig($hidden$2.successor)
$hidden$2.value.toString one of { "E", "F", "Westminster" }
$hidden$2.successors[] == []
$hidden$2.successors[].getClass().getName() == []
$hidden$2.predecessors[] == []
$hidden$2.predecessors[].getClass().getName() == []
$hidden$2.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::ENTER
node != null
node.value != null
node.successors != null
node.successors[] elements != null
node.successors[].getClass().getName() elements == java_programs.Node.class
node.predecessors[] == []
node.predecessors[].getClass().getName() == []
node.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT20
this.val$goalnode == orig(node)
this.val$goalnode.value == node.value
this.val$goalnode.successors == node.successors
this.val$goalnode.predecessors == node.predecessors
node.value == orig(this.val$goalnode.value)
node.successors == orig(this.val$goalnode.successors)
node.predecessors == orig(this.val$goalnode.predecessors)
node.value.toString one of { "E", "F", "Westminster" }
node.successors[] == []
node.successors[].getClass().getName() == []
return == true
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT20;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT23
node.predecessors == null
return == true
size(node.successors[]) one of { 1, 2, 3 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT23;condition="return == true"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT26
this.val$goalnode.value.toString one of { "E", "F" }
node.value.toString one of { "B", "E", "F" }
node.successors[] elements has only one value
node.successors[].getClass().getName() one of { [], [java_programs.Node] }
return == false
size(node.successors[]) one of { 0, 1 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT26;condition="not(return == true)"
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT
this.val$nodesvisited == orig(this.val$nodesvisited)
this.val$nodesvisited.getClass().getName() == orig(this.val$nodesvisited.getClass().getName())
this.val$goalnode == orig(this.val$goalnode)
this.val$goalnode.value == orig(this.val$goalnode.value)
this.val$goalnode.value.toString == orig(this.val$goalnode.value.toString)
this.val$goalnode.successors == orig(this.val$goalnode.successors)
this.val$goalnode.successors[] == orig(this.val$goalnode.successors[])
this.val$goalnode.predecessors == orig(this.val$goalnode.predecessors)
this.val$goalnode.predecessors[] == orig(this.val$goalnode.predecessors[])
this.val$goalnode.successor == orig(this.val$goalnode.successor)
node.value == orig(node.value)
node.value.toString == orig(node.value.toString)
node.successors == orig(node.successors)
node.successors[] == orig(node.successors[])
node.predecessors == orig(node.predecessors)
node.predecessors[] == orig(node.predecessors[])
node.successor == orig(node.successor)
(return == false)  ==>  (node.successors[] elements has only one value)
(return == false)  ==>  (node.successors[].getClass().getName() one of { [], [java_programs.Node] })
(return == false)  ==>  (node.value.toString one of { "B", "E", "F" })
(return == false)  ==>  (size(node.successors[]) one of { 0, 1 })
(return == false)  ==>  (this.val$goalnode.value.toString one of { "E", "F" })
(return == true)  ==>  (this.val$goalnode.value.toString one of { "E", "F", "Westminster" })
node.value != null
node.successors != null
node.successors[] elements != null
node.successors[].getClass().getName() elements == java_programs.Node.class
node.predecessors[] == []
node.predecessors[].getClass().getName() == []
node.successor == null
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT;condition="return == true"
return == true
===========================================================================
java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT;condition="not(return == true)"
this.val$goalnode.value.toString one of { "E", "F" }
node.value.toString one of { "B", "E", "F" }
node.successors[] elements has only one value
node.successors[].getClass().getName() one of { [], [java_programs.Node] }
return == false
size(node.successors[]) one of { 0, 1 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::ENTER
startnode.value.toString one of { "A", "F", "Tottenham Court Road" }
startnode.successors[].getClass().getName() elements == java_programs.Node.class
startnode.predecessors[] == []
startnode.predecessors[].getClass().getName() == []
startnode.successor == null
goalnode.value.toString one of { "E", "F", "Westminster" }
goalnode.successors[] == []
goalnode.successors[].getClass().getName() == []
goalnode.predecessors[] == []
goalnode.predecessors[].getClass().getName() == []
goalnode.successor == null
size(startnode.successors[]) one of { 0, 2, 3 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::EXIT
startnode.value == orig(startnode.value)
startnode.value.toString == orig(startnode.value.toString)
startnode.successors == orig(startnode.successors)
startnode.successors[] == orig(startnode.successors[])
startnode.predecessors == orig(startnode.predecessors)
startnode.predecessors[] == orig(startnode.predecessors[])
startnode.successor == orig(startnode.successor)
goalnode.value == orig(goalnode.value)
goalnode.value.toString == orig(goalnode.value.toString)
goalnode.successors == orig(goalnode.successors)
goalnode.successors[] == orig(goalnode.successors[])
goalnode.predecessors == orig(goalnode.predecessors)
goalnode.predecessors[] == orig(goalnode.predecessors[])
goalnode.successor == orig(goalnode.successor)
(return == false)  ==>  (goalnode.predecessors has only one value)
(return == false)  ==>  (goalnode.successors has only one value)
(return == false)  ==>  (goalnode.value has only one value)
(return == false)  ==>  (goalnode.value.toString == "E")
(return == false)  ==>  (orig(goalnode) has only one value)
(return == false)  ==>  (orig(startnode) has only one value)
(return == false)  ==>  (startnode.predecessors has only one value)
(return == false)  ==>  (startnode.successors has only one value)
(return == false)  ==>  (startnode.successors[] == [])
(return == false)  ==>  (startnode.successors[].getClass().getName() == [])
(return == false)  ==>  (startnode.value has only one value)
(return == false)  ==>  (startnode.value.toString == "F")
(return == true)  ==>  (goalnode.value.toString one of { "E", "F", "Westminster" })
(return == true)  ==>  (size(startnode.successors[]) one of { 0, 2, 3 })
(return == true)  ==>  (startnode.successors[].getClass().getName() elements == java_programs.Node.class)
(return == true)  ==>  (startnode.value.toString one of { "A", "F", "Tottenham Court Road" })
startnode.value.toString one of { "A", "F", "Tottenham Court Road" }
startnode.successors[].getClass().getName() elements == java_programs.Node.class
startnode.predecessors[] == []
startnode.predecessors[].getClass().getName() == []
startnode.successor == null
goalnode.value.toString one of { "E", "F", "Westminster" }
goalnode.successors[] == []
goalnode.successors[].getClass().getName() == []
goalnode.predecessors[] == []
goalnode.predecessors[].getClass().getName() == []
goalnode.successor == null
size(startnode.successors[]) one of { 0, 2, 3 }
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::EXIT;condition="return == true"
return == true
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.depth_first_search(java_programs.Node, java_programs.Node):::EXIT;condition="not(return == true)"
startnode.value has only one value
startnode.value.toString == "F"
startnode.successors has only one value
startnode.successors[] == []
startnode.successors[].getClass().getName() == []
startnode.predecessors has only one value
goalnode.value has only one value
goalnode.value.toString == "E"
goalnode.successors has only one value
goalnode.predecessors has only one value
return == false
orig(startnode) has only one value
orig(goalnode) has only one value
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
java_programs.DEPTH_FIRST_SEARCH.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
java_programs.Node:::OBJECT
this.value != null
this.successors != null
this.successors[] elements != null
this.successors[].getClass().getName() elements == java_programs.Node.class
this.predecessors[] == []
this.predecessors[].getClass().getName() == []
this.successor == null
===========================================================================
java_programs.Node.Node(java.lang.String):::ENTER
===========================================================================
java_programs.Node.Node(java.lang.String):::EXIT
this.value == orig(value)
value.toString == orig(value.toString)
this.successors[] == []
this.successors[].getClass().getName() == []
===========================================================================
java_programs.Node.Node(java.lang.String, java.util.ArrayList):::ENTER
successors[].getClass().getName() elements == java_programs.Node.class
size(successors[]) one of { 1, 2, 3 }
===========================================================================
java_programs.Node.Node(java.lang.String, java.util.ArrayList):::EXIT
this.value == orig(value)
this.successors == orig(successors)
value.toString == orig(value.toString)
successors[] == orig(successors[])
this.predecessors == null
successors[].getClass().getName() elements == java_programs.Node.class
size(this.successors[]) one of { 1, 2, 3 }
===========================================================================
java_programs.Node.getSuccessors():::ENTER
===========================================================================
java_programs.Node.getSuccessors():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.successors == return
this.successors[] == orig(this.successors[])
this.predecessors == orig(this.predecessors)
this.predecessors[] == orig(this.predecessors[])
this.successor == orig(this.successor)
return == orig(this.successors)
return[].getClass().getName() elements == java_programs.Node.class
===========================================================================
java_programs.Node.setSuccessors(java.util.ArrayList):::ENTER
this has only one value
this.value has only one value
this.value.toString == "E"
this.successors has only one value
this.successors[] == []
this.successors[].getClass().getName() == []
this.predecessors has only one value
successors has only one value
successors[] contains no nulls and has only one value, of length 1
successors[] elements has only one value
successors[].getClass().getName() == [java_programs.Node]
successors[].getClass().getName() elements == java_programs.Node.class
size(successors[]) == 1
===========================================================================
java_programs.Node.setSuccessors(java.util.ArrayList):::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.successors[] == orig(this.successors[])
this.predecessors[] == orig(this.predecessors[])
this.successor == orig(this.successor)
successors[] == orig(successors[])
this.value has only one value
this.value.toString == "E"
this.successors has only one value
this.successors[] == []
this.successors[].getClass().getName() == []
this.predecessors has only one value
successors[] contains no nulls and has only one value, of length 1
successors[] elements has only one value
successors[].getClass().getName() == [java_programs.Node]
successors[].getClass().getName() elements == java_programs.Node.class
Exiting Daikon.
