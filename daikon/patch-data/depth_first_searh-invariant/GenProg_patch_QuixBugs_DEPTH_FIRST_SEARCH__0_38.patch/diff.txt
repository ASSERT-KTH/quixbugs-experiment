<java_programs.DEPTH_FIRST_SEARCH$1Search.search(java_programs.Node):::EXIT>
  <(return == false)  ==>  (size(node.successors[..]) one of { 0, 1 }) {1+}, (return == false)  ==>  (size(node.successors[..]) one of { 0, 1, 3 }) {1+}> (Nul,DJJ)
  <(return == false)  ==>  (node.successors[..] elements has only one value) {1+}, null> (Nul,JM)
  <(return == false)  ==>  (node.value.toString one of { "B", "E", "F" }) {1+}, null> (Nul,JM)
  <(return == false)  ==>  (node.successors[..].getClass().getName() one of { [], [java_programs.Node] }) {1+}, null> (Nul,JM)
<java_programs.Node.setSuccessors(java.util.ArrayList):::EXIT>
  <null, size(this.successors[..])-1 == orig(size(this.successors[..])) {1+}> (Bin,MJ)
  <null, this.predecessors == orig(this.predecessors) {1+}> (Bin,MJ)
  <null, this.successors == orig(successors) {1+}> (Bin,MJ)
  <this.successors == orig(this.successors) {1+}, null> (Bin,JM)
  <this.successors[..] == orig(this.successors[..]) {1+}, null> (Bin,JM)
  <size(this.successors[..]) == 0 {1-}, size(this.successors[..]) == 1 {1+}> (Una,DJJ)
  <this.successors[..] elements one of {  } {0-}, this.successors[..] elements has only one value {1+}> (Una,DUJ)
  <this.successors[..] == [] {1+}, this.successors[..] contains no nulls and has only one value, of length 1 {1+}> (Una,DJJ)
  <this.successors[..].getClass().getName() == [] {1+}, this.successors[..].getClass().getName() == [java_programs.Node] {1+}> (Una,DJJ)
